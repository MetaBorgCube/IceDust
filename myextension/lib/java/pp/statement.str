module java/pp/statement
rules

  stm-box:
    x -> box |[ H hs=0 [~x ";"] ]|

  java-to-box:
    Block(stms) -> <block-structure> (0, stms)

  java-to-box:
    ClassDecStm(classdec) -> classdec

  java-to-box: Return(None())  -> <stm-box> box |[  KW["return"] ]|
  java-to-box: Return(Some(e)) -> <stm-box> box |[ H hs=1 [KW["return"] ~e] ]|

  java-to-box:
    ExprStm(e) -> <stm-box> e

  java-to-box:
    Empty()  -> box |[ ";" ]|

rules

  java-to-box :
    LocalVarDecStm(lvardec) -> H hs=0 [b ";"]
      where <LocalVarDec-to-box> lvardec => b

  LocalVarDec-to-box :
    LocalVarDec(mods, type, ds) -> H hs=1 [~*mods ~type ~decs]
      where <separate-by-comma> ds => decs

rules

  java-to-box:
    Try(block, catches) -> V vs=0 [KW["try"] ~block ~*catches]

  java-to-box:
    Try(block, catches, finally)
      ->
    V vs=0 [KW["try"] ~block ~*catches KW["finally"] ~finally]

  java-to-box:
    Catch(param, block)
      ->
     V vs=0 [H hs=0 [KW["catch"] "(" ~param ")"] ~block]

  java-to-box:
    Throw(e) -> H hs=1 [KW["throw"] H hs=0[~e ";" ]]

/**
 * if and if-else
 */
rules

  java-to-box =
    ?If(_, _)
    ; if-then-to-box

  java-to-box:
    If(b1, b2, b3) -> V vs=0 [b4 b5]
    where
        <if-then-to-box> If(b1, b2) => b4
      ; <if-else-to-box> If(b1, b2, b3) => b5

  if-then-to-box :
    If(b1, b2) -> V is=2 vs=0 [H hs=0 [KW["if"] "(" b1 ")"] b2]
    where
      not(!b2 => Block(_))

  if-then-to-box :
    If(b1, b2) -> V vs=0 [H hs=0 [KW["if"] "(" b1 ")"] b2]
    where
      !b2 => Block(_)

  if-else-to-box :
    If(b1, b2, b3) -> V is=2 vs=0 [KW["else"] b3]
    where
      not(!b3 => Block(_))

  if-else-to-box :
    If(b1, b2, b3) -> V vs=0 [KW["else"] b3]
    where
      !b3 => Block(_)

/**
 * While Statements
 */
rules

  java-to-box:
    While(cond, b) -> V vs=0 [H hs=0 [KW["while"] "(" ~cond ")"] ~b]

  java-to-box:
    DoWhile(b, cond) -> V vs=0 [KW["do"] ~b H hs=0 [KW["while"] "(" ~cond ")" ";"]]

/**
 * For Statements
 */
rules

  java-to-box:
    f@For(init, cond, update, b2) -> box |[ V is=2 vs=0 [b1 b2] ]|
    where
      <for-head> f => b1
      ; not(!b2 => Block(_))

  java-to-box:
    f@For(init, cond, update, b2) -> box |[ V vs=0 [b1 b2] ]|
    where
      <for-head> f => b1
      ; !b2 => Block(_)

  for-head :
    For(init, cond, update, body)
      ->
    H hs=0 [
      KW["for"]
      "("
      ~binit
      H hs=1 [";" ~*bcond]
      H hs=1 [";" ~bupdate]
      ")"
    ]
    where
      <separate-by-comma> update => bupdate

      ; < LocalVarDec-to-box; ![<id>]
          <+ is-list; separate-by-comma
        > init => binit

      ; < ?Some(<id>); ![<id>]
          <+ ?None(); ![]
        > cond => bcond

/**
 * For Each Statements
 */
rules

  java-to-box:
    f@ForEach(param, source, b2) -> box |[ V is=2 vs=0 [b1 b2] ]|
    where
      <for-each-head> f => b1
      ; not(!b2 => Block(_))

  java-to-box:
    f@ForEach(param, source, b2) -> box |[ V vs=0 [b1 b2] ]|
    where
      <for-each-head> f => b1
      ; !b2 => Block(_)

  for-each-head :
    ForEach(param, source, body)
      ->
    H hs=1 [
      H hs=0 [KW["for"] KW["("] ~param]
      KW[":"]
      H hs=0 [~source KW[")"]]
    ]

rules

  java-to-box:
    Synchronized(e, b) -> box |[ V vs=0 [H hs=0 [KW["synchronized"] "(" ~e ")"] ~b] ]|

  java-to-box:
    Break(Some(Id(s))) -> H hs=0 [H hs=1 [KW["break"] s] ";"]

  java-to-box:
    Break(None()) -> H hs=0 [KW["break"] ";"]

  java-to-box:
    Continue(Some(Id(s))) -> H hs=0 [H hs=1 [KW["continue"] s] ";"]

  java-to-box:
    Continue(None())      -> H hs=0 [KW["continue"] ";"]

  java-to-box:
    Labeled(Id(s), stm) -> box |[ V [ H hs=0 [ s ":" ] ~stm] ]| 

  java-to-box:
    AssertStm(e) -> box |[ H hs=0 [H hs=1 [KW["assert"] ~e] ";"] ]| 

  java-to-box:
    AssertStm(e1, e2) -> H hs=0 [H hs=1 [KW["assert"] ~e1 ":" ~e2] ";"]

  java-to-box:
    Switch(b1, b2) -> V vs=0 [H hs=0 [KW["switch"] "(" b1 ")"] b2]

  java-to-box:
    SwitchBlock(groups, labels) ->
      <block-structure> (1, <conc> (groups, labels))

  java-to-box:
    SwitchGroup(labels, stms) -> V is=2 vs=0 [ V vs=0 [~*labels] ~*stms ]

  java-to-box:
    Case(e) -> H hs=0 [H hs=1 [KW["case"] ~e] ":"]

  java-to-box:
    Default() -> H hs=0 [KW["default"] ":"]

