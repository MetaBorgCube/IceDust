module org/webdsl/dsl/utils/constructors

// Constructors shared between front- and back-end

signature constructors	// not generated automatically due to usage of AST Term as constructor
  String : Term -> Term
  Text : Term -> Term

signature constructors		// utils
  RemoveMe : Annotation

signature constructors		// data model
  //JoinProperties : List(String) -> Annotation
  ClassSort : Id -> Sort


signature constructors		// ui normalized if template
  IfTempl : Term * Term * Term -> Term

signature constructors		// request var
  RequestVar : Id -> Var
  RequestScopeVarDecl : Id * Sort -> VarDecl
  RequestScopeVarDeclInit : Id * Sort * Exp -> VarDecl

signature constructors   //request var inside template
  RequestScopeTemplateVarDecl : Term * Term -> Term
  RequestScopeTemplateVarDeclInit : Term * Term * Term -> Term

signature constructors   //local var inside template
  LocalScopeTemplateVarDecl : Term * Term -> Term
  LocalScopeTemplateVarDeclInit : Term * Term * Term -> Term

signature constructors		// template call
  ResolvedRequireKey: Term -> Term

signature constructors //Function
  Function : Term * Term * Term * Term -> Term
  ExtendFunction : Term -> Term
  CachedFunction : Term -> Term

signature constructors //Function Exp
  FunctionExp : Term * Term * Term -> Exp
  FunctionRef : Term * Term * Term -> Exp
  FunctionRefCall : Term * Term -> Exp
  FunctionRefCallPartial : Term * Term -> Exp
  FunctionSort : Term * Term -> Sort
  UnnamedArg : Term -> Term

signature constructors //pass global info to back-end
  AllTemplateDefsAnno : Term -> Term

signature constructors //these are no longer generated after some refactoring in the sdf, not clear why
  IdErrorAnno : Term -> Term
  IdEmptyErrorAnno : Term -> Term
  EnumValue : Term * Term -> Term
  Argument : Term * Term -> Term
  FormatAnno : Term -> Term

signature constructors
  NoEnclosingDefine : Term // see org/webdsl/dsl/languages/ui/render-template-function

signature constructors
  InlineableTemplate : Term

signature constructors // these use ast("Placeholder(<2>,<3>)") in the syntax definition, which breaks automatic signature generation
  Placeholder : Term * Term -> Term
  Placeholder : Term * Term * Term -> Term
  PlaceholderWithAjaxCall : Term * Term -> Term
  PlaceholderWithAjaxCall : Term * Term * Term -> Term
  PlaceholderVar : Term -> Term

signature constructors
  EntityDeriveTemplateCall : Term

signature constructors
  XMLComment : Term -> Term

signature constructors
  TemplateElementsArgumentReplaced : Term

signature constructors // template var args
  FieldAccessVarArgIndex : Term * Term * Term * Term -> Term
  MemberTemplateCallIndex : Term * Term * Term -> Term
  ExpVarArgForDesugared : Term * Term -> Term
  TemplateCallExpression : Term * Term * Term * Term -> Term
  TemplateVarArgSortInner : List(FormalVarArg) -> Sort
