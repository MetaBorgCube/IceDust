module lib/js/pp/Expression-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  lib/js/signatures/Expression-sig


imports
  lib/js/signatures/Common-sig
  lib/js/signatures/Parameter-sig
  lib/js/signatures/Statement-sig


imports
  lib/js/pp/Common-pp
  lib/js/pp/Parameter-pp
  lib/js/pp/Statement-pp


strategies
  prettyprint-example =
    prettyprint-spoofaxJS

  prettyprint-spoofaxJS =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-spoofaxJS-start-symbols

  prettyprint-spoofaxJS-start-symbols =
    fail


strategies
  prettyprint-spoofaxJS =
    prettyprint-Expression

  prettyprint-Expression :
    Relation(e1) -> <prettyprint-Expression> e1

  prettyprint-Expression :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S(" ( ")
                               , t1__'
                               , S(" ) ")
                               ]
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__

  prettyprint-Expression :
    Property(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S("."), t2__']
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ID)> t2__

  is-Expression =
    ?Property(_, _)

  get-indent :
    (Property(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Property(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Property(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Call(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ t1__'
                            , S("(")
                            , t2__'
                            , S(")")
                            ]
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Expression|",")> t2__

  is-Expression =
    ?Call(_, _)

  get-indent :
    (Call(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Call(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ","
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Call(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    IntegerLiteral(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-INT)> t1__

  is-Expression =
    ?IntegerLiteral(_)

  get-indent :
    (IntegerLiteral(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (IntegerLiteral(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (IntegerLiteral(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    FloatLiteral(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__']
                            )
                          ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-FLOAT)> t1__

  is-Expression =
    ?FloatLiteral(_)

  get-indent :
    (FloatLiteral(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (FloatLiteral(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (FloatLiteral(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  is-Expression =
    ?True()

  get-indent :
    (True(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (True(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (True(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  is-Expression =
    ?False()

  get-indent :
    (False(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (False(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (False(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Null() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("null")]
                )
              ]

  is-Expression =
    ?Null()

  get-indent :
    (Null(), index) -> indent
    with switch !index
           otherwise :
             indent := ""
         end

  get-separator :
    (Null(), index) -> separator
    with switch !index
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Null(), index) -> ws
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Identifier(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__']
                          )
                        ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ID)> t1__

  is-Expression =
    ?Identifier(_)

  get-indent :
    (Identifier(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Identifier(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Identifier(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    String(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-STRING)> t1__

  is-Expression =
    ?String(_)

  get-indent :
    (String(t1__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (String(t1__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (String(t1__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Addition(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S(" + "), t2__']
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Addition(_, _)

  get-indent :
    (Addition(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Addition(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Addition(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end
  
  prettyprint-Expression :
    Substraction(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__', S(" - "), t2__']
                                  )
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Substraction(_, _)

  get-indent :
    (Substraction(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Substraction(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Substraction(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Multiplication(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" * "), t2__']
                                    )
                                  ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Multiplication(_, _)

  get-indent :
    (Multiplication(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Multiplication(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Multiplication(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Division(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S(" / "), t2__']
                              )
                            ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Division(_, _)

  get-indent :
    (Division(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Division(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Division(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Greater(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" > "), t2__']
                             )
                           ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Greater(_, _)

  get-indent :
    (Greater(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Greater(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Greater(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Lower(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" < "), t2__']
                           )
                         ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Lower(_, _)

  get-indent :
    (Lower(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Lower(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Lower(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    GreaterEquals(t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__', S(" >= "), t2__']
                                   )
                                 ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?GreaterEquals(_, _)

  get-indent :
    (GreaterEquals(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (GreaterEquals(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (GreaterEquals(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    LowerEquals(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__', S(" <= "), t2__']
                                 )
                               ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?LowerEquals(_, _)

  get-indent :
    (LowerEquals(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (LowerEquals(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (LowerEquals(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    And(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" && "), t2__']
                         )
                       ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?And(_, _)

  get-indent :
    (And(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (And(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (And(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    Or(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" || "), t2__']
                        )
                      ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-Expression)> t2__

  is-Expression =
    ?Or(_, _)

  get-indent :
    (Or(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  get-separator :
    (Or(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (Or(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Expression :
    AnonFunction(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("function(")
                                    , t1__'
                                    , S(") {")
                                    ]
                                  )
                                , t2__'
                                , t3__'
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Parameter|",")> t1__
    with t2__' := <pp-indent(|"6")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-V-list(prettyprint-Statement)> t2__
                                    ]
    with t3__' := <pp-indent(|"2")> [S("}")]

  is-Expression =
    ?AnonFunction(_, _)

  get-indent :
    (AnonFunction(t1__, t2__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := "      "
           otherwise :
             indent := ""
         end

  get-separator :
    (AnonFunction(t1__, t2__), index) -> separator
    with switch !index
           case ?1 :
             separator := ","
           case ?2 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (AnonFunction(t1__, t2__), index) -> ws
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := "\n      "
           otherwise :
             ws := ""
         end

  is-Expression =
    fail

  prettyprint-Expression :
    amb([h|hs]) -> <prettyprint-Expression> h

  prettyprint-INT :
    INT-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[INT]]")]
                     )
                   ]

  is-INT =
    ?INT-Plhdr()

  is-SDF-placeholder =
    ?INT-Plhdr()

  prettyprint-FLOAT :
    FLOAT-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[FLOAT]]")]
                       )
                     ]

  is-FLOAT =
    ?FLOAT-Plhdr()

  is-SDF-placeholder =
    ?FLOAT-Plhdr()

  prettyprint-ID :
    ID-Plhdr() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("[[ID]]")]
                    )
                  ]

  is-ID =
    ?ID-Plhdr()

  is-SDF-placeholder =
    ?ID-Plhdr()

  prettyprint-STRING :
    STRING-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[STRING]]")]
                        )
                      ]

  is-STRING =
    ?STRING-Plhdr()

  is-SDF-placeholder =
    ?STRING-Plhdr()

  prettyprint-Expression :
    Expression-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[Expression]]")]
                            )
                          ]

  is-Expression =
    ?Expression-Plhdr()

  is-SDF-placeholder =
    ?Expression-Plhdr()

  prettyprint-Parameter :
    Parameter-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Parameter]]")]
                           )
                         ]

  is-Parameter =
    ?Parameter-Plhdr()

  is-SDF-placeholder =
    ?Parameter-Plhdr()

  prettyprint-Statement :
    Statement-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Statement]]")]
                           )
                         ]

  is-Statement =
    ?Statement-Plhdr()

  is-SDF-placeholder =
    ?Statement-Plhdr()