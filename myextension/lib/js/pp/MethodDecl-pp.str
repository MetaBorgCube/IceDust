module lib/js/pp/MethodDecl-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  lib/js/signatures/MethodDecl-sig


imports
  lib/js/signatures/Common-sig
  lib/js/signatures/Statement-sig
  lib/js/signatures/Expression-sig
  lib/js/signatures/Parameter-sig


imports
  lib/js/pp/Common-pp
  lib/js/pp/Statement-pp
  lib/js/pp/Expression-pp
  lib/js/pp/Parameter-pp


strategies
  prettyprint-example =
    prettyprint-spoofaxJS

  prettyprint-spoofaxJS =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-spoofaxJS-start-symbols

  prettyprint-spoofaxJS-start-symbols =
    fail


strategies
  prettyprint-spoofaxJS =
    prettyprint-MethodDecl

  prettyprint-MethodDecl :
    method(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("function ")
                                    , t1__'
                                    , S("(")
                                    , t2__'
                                    , S(") {")
                                    ]
                                  )
                                , t3__'
                                , H(
                                    [SOpt(HS(), "0")]
                                  , [S("}")]
                                  )
                                ]
    with t1__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <is-string ; pp-one-Z(prettyprint-origin-term)
                   <+ pp-H-list(prettyprint-Parameter|",")> t2__
    with t3__' := <pp-indent(|"2")> [ <is-string ; pp-one-Z(prettyprint-origin-term)
                                       <+ pp-V-list(prettyprint-Statement)> t3__
                                    ]

  is-MethodDecl =
    ?method(_, _, _)

  get-indent :
    (method(t1__, t2__, t3__), index) -> indent
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := "  "
           otherwise :
             indent := ""
         end

  get-separator :
    (method(t1__, t2__, t3__), index) -> separator
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ","
           case ?3 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  get-leading-ws :
    (method(t1__, t2__, t3__), index) -> ws
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           case ?3 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  is-MethodDecl =
    fail

  prettyprint-MethodDecl :
    amb([h|hs]) -> <prettyprint-MethodDecl> h

  prettyprint-MethodDecl :
    MethodDecl-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[MethodDecl]]")]
                            )
                          ]

  is-MethodDecl =
    ?MethodDecl-Plhdr()

  is-SDF-placeholder =
    ?MethodDecl-Plhdr()

  prettyprint-ID :
    ID-Plhdr() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("[[ID]]")]
                    )
                  ]

  is-ID =
    ?ID-Plhdr()

  is-SDF-placeholder =
    ?ID-Plhdr()

  prettyprint-Parameter :
    Parameter-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Parameter]]")]
                           )
                         ]

  is-Parameter =
    ?Parameter-Plhdr()

  is-SDF-placeholder =
    ?Parameter-Plhdr()

  prettyprint-Statement :
    Statement-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Statement]]")]
                           )
                         ]

  is-Statement =
    ?Statement-Plhdr()

  is-SDF-placeholder =
    ?Statement-Plhdr()