module generating/_ir/expressions

imports // constructors

  java/Java
  signatures/Expressions-sig
  signatures/Types-sig
  tiersplit/constructors

imports // functions

  api/_runtime
  lib/lists-tuples
  lib/string
  lib/traverse
//  names/naming/names

rules // math

  lib-call-postfix-type:     Addition(_, _)         ->"plus"
  lib-call-postfix-type:     Subtraction(_, _)      ->"minus"
  lib-call-postfix-type:     Division(_, _)         ->"div"
  lib-call-postfix-type:     FloorDivision(_, _)    ->"floordiv"
  lib-call-postfix-type:     Modulo(_, _)           ->"mod"
  lib-call-postfix-type:     Multiplication(_, _)   ->"mul"

rules // logic
  
  lib-call-postfix-type:     Not(_)                 ->"not"
  lib-call-postfix-type:     LessThan(_, _)         ->"lt"
  lib-call-postfix-type:     LessThanEqual(_, _)    ->"lte"
  lib-call-postfix-type:     GreaterThan(_, _)      ->"gt"
  lib-call-postfix-type:     GreaterThanEqual(_,_)  ->"gte"
  lib-call-postfix-mults:    Equal(_, _)            ->"eq"
  lib-call-postfix-mults:    Inequal(_, _)          ->"neq"
  lib-call:                  And(_, _)              ->"and"
  lib-call:                  Or(_, _)               ->"or"
  lib-call-postfix-mults:    If(_,_,_)              ->"conditional"

rules // aggregations
  
  lib-call-postfix-type:     Max(_)                 ->"max"
  lib-call-postfix-type:     Min(_)                 ->"min"
  lib-call-postfix-type:     Avg(_)                 ->"avg"
  lib-call-postfix-type:     Sum(_)                 ->"sum"
  lib-call:                  Conj(_)                ->"conj"
  lib-call:                  Disj(_)                ->"disj"
  lib-call:                  Concat(_)              ->"concat"
  lib-call:                  Count(_)               ->"count"

rules // multiplicities
  
  lib-call-postfix-mults:    Merge(_, _)            ->"merge"
  lib-call-postfix-mults:    ChoiceLeft(_, _)       ->"choice"

rules // collections

  lib-call:                  First(_)               ->"first"
  lib-call:                  First(_,_)             ->"first"
  lib-call:                  IndexOf(_, _)          ->"indexOf"
  lib-call:                  ElemAt(_, _)           ->"elemAt"

rules // lib-call catch all
  
  lib-call = lib-call-postfix-type
  lib-call = lib-call-postfix-mults

rules // rel-expr -> String
  
  lib-method-name: e -> x_methodpostfix
    with
      x_method        := <lib-call>e;
      arg-type*       := <method-type-postfix>e;
      arg-mult*       := <method-mult-postfix>e;
      x_methodpostfix := <concat-strings(|"_")>[x_method, arg-type*, arg-mult*]

rules // rel-expr -> List(String)


  method-type-postfix: e -> []
    where <not(lib-call-postfix-type)>e

  method-type-postfix: e -> [arg-type]
    with
      arg* := <get-arguments>e;
      if <not(eq)>(<lFst;get-type2>arg*, NoValue()) <+ not(lSnd) then //if first is not NoValue or there is no second, TODO: move to type system
        arg-type := <lFst;get-type2;postfix-id>arg*
      else
        arg-type := <lSnd;get-type2;postfix-id>arg*
      end
  
  method-mult-postfix: e -> []
    where <not(lib-call-postfix-mults)>e
    
  method-mult-postfix: e -> arg-mult*
    with
      arg* := <get-arguments>e;
      arg-mult* := <map(get-multiplicity;postfix-id)>arg*

rules // type -> String
  
  postfix-id: String()   -> "String"
  postfix-id: Int()      -> "Integer"
  postfix-id: Boolean()  -> "Boolean"
  postfix-id: Float()    -> "Float"
  postfix-id: Datetime() -> "Date"
  postfix-id: NoValue()  -> "NullType"

rules // multiplicity -> String
  
  postfix-id: ZeroOrOne()  -> "One"
  postfix-id: One()        -> "One"
  postfix-id: ZeroOrMore() -> "Many"
  postfix-id: OneOrMore()  -> "Many"
