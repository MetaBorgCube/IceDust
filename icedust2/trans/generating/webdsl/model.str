module generating/webdsl/model

imports // constructors

//  api/constructors
//  desugaring/constructors
  tiersplit/constructors
  webdsl/WebDSL
  signatures/Model-sig
  signatures/Modules-sig
  signatures/Expressions-sig
  signatures/Types-sig

imports // functions

  analysis2/path
  api/_runtime
  api/model-api
  api/model-names-api
  generating/_ir/model
  generating/webdsl/expressions
  generating/webdsl/expressions-references
  generating/webdsl/types
  lib/search
//  names/naming/names
//  naming/_notNaBL
  tiersplit/intra-object
  lib/traverse

rules // entities

  model-entityname-to-webdsl-def(err): x_entityName -> result
    where
      <is-entityname> x_entityName
    with
      ebd_members*    := <entityname-get-arrinames-defined     ;fmap(model-membername-to-webdsl-ebds(err)       )>x_entityName;
      ebd_shortcuts*  := <entityname-get-shortcutnames-defined ;fmap(model-shortcutname-to-webdsl-ebds(err))     >x_entityName
    with
      switch id
        case x_parentName := <entityname-get-parentname>x_entityName:
          result := def |[
            entity x_entityName : x_parentName {
              ebd_members*
              ebd_shortcuts*
            }
          ]|
        otherwise:
          result := def |[
            entity x_entityName {
              ebd_members*
              ebd_shortcuts*
            }
          ]|
      end

rules

  model-membername-to-webdsl-ebds(err): x_name -> result
    where
      is-attributename <+ is-relationname <+ is-rolename <+ is-inversename
    with
      x_entityName       := <attributename-get-entityname>x_name;
      x_moduleName       := <entityname-get-modulename>x_entityName;
      srt_type           := <name-get-type;type-to-webdsl-srt(err)>x_name;
      srt_multType       := <name-to-webdsl-srt(err)>x_name;
      e_name             := String(x_name);
      e_qualifiedName    := String($[[x_entityName].[x_name]]);
      e_entityName       := String(x_entityName);
      x_get              := <name-get>x_name;
      x_set              := <name-set>x_name;
      x_add              := <name-add>x_name;
      x_remove           := <name-remove>x_name;
      x_addTo            := <name-add-trigger>x_name;
      x_removeFrom       := <name-remove-trigger>x_name;
      x_calculate        := <name-calculate>x_name;
      x_getCalculated    := <name-getCalculated>x_name;
      x_cache            := <name-cache>x_name;
      x_updateCache      := <name-update-cache>x_name;
      x_dirty            := <name-dirty>x_name;
      x_qualifiedDirty   := <attributename-entityname-dirty>x_name;
      x_updateAllCache   := <name-updateallcache>x_name;
      x_hasDirty         := <name-hasdirty>x_name;
      x_flagDirty        := <name-flagdirty>x_name;
      x_dirtyFlagFlows   := <name-dirtyflagflowsto>x_name;
      x_setIncr          := <name-set-incremental>x_name;
      x_addIncr          := <name-add-incremental>x_name;
      x_removeIncr       := <name-remove-incremental>x_name;
      x_setCacheIncr     := <name-set-cache-incr>x_name;
      x_addCacheIncr     := <name-add-cache-incr>x_name;
      x_removeCacheIncr  := <name-remove-cache-incr>x_name;
      x_setCache         := <name-set-cache>x_name;
      x_addCache         := <name-add-cache>x_name;
      x_removeCache      := <name-remove-cache>x_name;
      x_addToCache       := <name-add-cache-trigger>x_name;
      x_removeFromCache  := <name-remove-cache-trigger>x_name;
      x_getQueue         := <attributename-entityname-getqueue>x_name;
      x_hasDirtyAsync    := <name-hasdirtyasync>x_name;
      x_flagDirtyAsync   := <name-flagdirtyasync>x_name;
      x_receiveOneDirtyAsync := <name-receiveonedirtyasync>x_name;
//      x_updateAllCacheAsync  := <name-updateallcacheasync>x_name;
      x_updateOneCacheAsync  := <name-updateonecacheasync>x_name;
      x_isUpToDate       := <name-isuptodate>x_name;
      x_topoSort         := <(name-get-toposort<+!0);int-to-string>x_name
    with
      if name-is-bidirectional then
        x_inverseName            := <name-get-inversename>x_name;
        x_inverseEntityName      := <attributename-get-entityname>x_inverseName;
        srt_inverseType          := <name-get-type;type-to-webdsl-srt(err)>x_inverseName;
        x_inverseCache           := <name-cache>x_inverseName;
        x_inverseSetIncr         := <name-set-incremental>x_inverseName;
        x_inverseAddIncr         := <name-add-incremental>x_inverseName;
        x_inverseRemoveIncr      := <name-remove-incremental>x_inverseName;
        x_inverseSetCacheIncr    := <name-set-cache-incr>x_inverseName;
        x_inverseAddCacheIncr    := <name-add-cache-incr>x_inverseName;
        x_inverseRemoveCacheIncr := <name-remove-cache-incr>x_inverseName
      end
    with
      if name-has-expr then
        e_calculate := <attributename-get-expr;expr-to-webdsl-expr(err)>x_name
      end
    with
      stat_flowsTo* := <name-get-flowsto-pathexprs-ondemandinc-incremental-eventual;map(model-pathexpr-to-webdsl-stm(err))>x_name
    with // Partial evaluation variables (Expressions + Data Layer?)
      switch id
        case name-has-expr; attributename-is-explorerui:
          ebd_calculateTiersplitVar* := <attributename-get-expr-tiersplit-vars;map(var-to-webdsl-function(err))>x_name
        otherwise:
          ebd_calculateTiersplitVar* := []
      end
    with // Recalculation report layer
      switch id
        case name-is-default-derived; (name-is-eventual<+name-is-ondemandeventual):
          ebd_isUpToDate* := ebd* |[
            static function x_isUpToDate () : Bool {
              return DirtyCollections.getI() > x_topoSort;
            }
          ]|
        otherwise:
          ebd_isUpToDate* := []
      end
    with // Recalculate cache Layer
      switch id
        case name-is-incremental-eventual; name-is-default-derived; name-is-ordered:
          ebd_updateCache* := ebd* |[
            function x_updateCache(){
              x_cache := x_calculate();
            }
          ]|
        case name-is-incremental-eventual; name-is-default-derived; name-is-unordered: //TODO: get rid of this special case
          ebd_updateCache* := ebd* |[
            function x_updateCache(){
              x_cache := x_calculate().set(); // convert to set
            }
          ]|
        case name-is-ondemandinc; name-is-default-derived; name-is-ordered:
          ebd_updateCache* := ebd* |[
            function x_updateCache(){
              x_cache := x_calculate();
              x_dirty := false;
              log("Updating " + e_qualifiedName);
            }
          ]|
        case name-is-ondemandinc; name-is-default-derived; name-is-unordered: //TODO: get rid of this special case
          ebd_updateCache* := ebd* |[
            function x_updateCache(){
              x_cache := x_calculate().set(); // convert to set
              x_dirty := false;
              log("Updating " + e_qualifiedName);
            }
          ]|
        otherwise:
          ebd_updateCache* := []
      end
    with
      switch id
        case name-is-incremental; name-is-default-derived:
          ebd_updateAllCache* := ebd* |[
            static function x_updateAllCache () {
              var entities := x_qualifiedDirty;
              x_qualifiedDirty := Set<x_entityName>();
              if(entities.length != 0){
                log("Updating " + e_qualifiedName + ": " + entities.length);
              }
              for(en in entities){
                en.x_updateCache();
              }
            }
      
            static function x_hasDirty () : Bool {
              return x_qualifiedDirty.length!=0;
            }
          ]|
        otherwise:
          ebd_updateAllCache* := []
      end
    with
      switch id // TODO: add async to documentation
        case name-is-default-derived; name-is-eventual:
          ebd_flagDirtyAsync* := ebd* |[
            static function x_flagDirtyAsync() {
              var dirtyValues := x_qualifiedDirty;
              x_qualifiedDirty := Set<x_entityName>();
//              DirtyCollections.x_getQueue().addAll([v.id.toString()|v : x_entityName in dirtyValues]);
              var queue := DirtyCollections.x_getQueue();
              for(s:String in [ v.id.toString() | v : x_entityName in dirtyValues ]){ 
//                if(!queue.contains(s)){
                queue.add(s);
//                }
              }
              if(dirtyValues.length != 0){
                DirtyCollections.dirtyI(x_topoSort);
              }
            }
  
            static function x_receiveOneDirtyAsync() : x_entityName {
              var queue := DirtyCollections.x_getQueue();
              if(queue.length != 0){
                var key := queue.first as String;
                queue.remove(key);
                var v : x_entityName := loadEntity(e_entityName, UUIDFromString(key)) as x_entityName;
                return v;
              }
              return null;
            }
            
//            static function x_updateAllCacheAsync () {
//              var i := 1;
//              while( x_entityName.x_hasDirtyAsync() ){
//                var en := x_entityName.x_receiveOneDirtyAsync();
//                log("Updating " + e_qualifiedName + ": " + i + " " + en.id);
//                en.x_updateCache();
//                commitAndStartNewTransaction();
//                i := i + 1;
//              }
//            }
            
            static function x_updateOneCacheAsync () {
              if( x_entityName.x_hasDirtyAsync() ){
                var en := x_entityName.x_receiveOneDirtyAsync();
                log("Updating " + e_qualifiedName + ": " + en.id);
                en.x_updateCache();
                commitAndStartNewTransaction();
              }
            }
      
            static function x_hasDirtyAsync () : Bool {
              var queue := DirtyCollections.x_getQueue();
              return queue.length != 0;
            }
          ]|
        otherwise:
          ebd_flagDirtyAsync* := []
      end
    with // Set, maintain incremental Layer
      switch id
        case name-is-normal-default; name-is-to-one; name-is-ondemandinc-incremental-eventual:
          ebd_setIncremental* := ebd* |[
            extend function x_set(newValue : srt_type){
              if(x_name != newValue){
                x_dirtyFlagFlows();
              }
            }
          ]|
        case name-is-normal-default; name-is-to-many; name-is-ondemandinc-incremental-eventual:
          ebd_setIncremental* := ebd* |[
            extend function x_addTo(en : srt_type){
              if(en != null){ //TODO: should check if its already in there for sets
                x_dirtyFlagFlows();
              }
            }
            extend function x_removeFrom(en : srt_type){
              if(en != null){ //TODO: should check if it was in there
                x_dirtyFlagFlows();
              }
            }
          ]|
        otherwise:
          ebd_setIncremental* := []
      end
    with
      switch id
        case name-is-to-one; name-is-default-derived-incremental-eventual-parent-not:
          ebd_setCacheIncr* := ebd* |[
            extend function x_setCache(newValue : srt_type){
              if(x_cache != newValue){ //TODO: should check if there is a userField, and if it has a value
                x_dirtyFlagFlows();
              }
            }
          ]|
        case name-is-to-many; name-is-default-derived-incremental-eventual-parent-not:
          ebd_setCacheIncr* := ebd* |[
            extend function x_addToCache(en : srt_type){
              if(en != null){ //TODO: should check if its already in there for sets //TODO: should check if there is a userField, and if it has a value
                x_dirtyFlagFlows();
              }
            }
            extend function x_removeFromCache(en : srt_type){
              if(en != null){ //TODO: should check if it was in there //TODO: should check if there is a userField, and if it has a value
                x_dirtyFlagFlows();
              }
            }
          ]|
        otherwise:
          ebd_setCacheIncr* := []
      end
    with // Getter, many valued Layer
      switch id
        case name-is-to-one:
          ebd_getStatic* := ebd* |[
            static function x_get(en: x_entityName) : srt_type {
              return if(en == null) null as srt_type else en.x_get();
            }
            
            static function x_get(ens : [x_entityName]) : [srt_type] {
              return [en.x_get() | en : x_entityName in ens where en.x_get() != null];
            }
          ]|
        case name-is-to-many:
          ebd_getStatic* := ebd* |[
            static function x_get(en: x_entityName) : [srt_type] {
              var empty : [srt_type];
              return if(en == null) empty else en.x_get();
            }
            
            static function x_get(ens : [x_entityName]) : [srt_type] {
              var r : [srt_type];
              for(en in ens){
                r.addAll(en.x_get());
              }
              return r;
            }
          ]|
      end
    with // Getter, derivation type Layer
      switch id
        case name-is-normal; name-is-to-one:
          ebd_get* := ebd* |[
            function x_get() : srt_multType {
              return this.x_name;
            }
          ]|
        case name-is-normal; name-is-to-many: //TODO: get rid of this special case
          ebd_get* := ebd* |[
            function x_get() : srt_multType {
              return [en | en : srt_type in this.x_name]; // list comprehension to convert set or list to list
            }
          ]|
        case name-is-default:
          ebd_get* := ebd* |[
            function x_get() : srt_multType {
              return if(this.x_name != null) this.x_name else this.x_getCalculated();
            }
          ]|
        case name-is-derived:
          ebd_get* := ebd* |[
            function x_get() : srt_multType {
              return this.x_getCalculated();
            }
            
//            x_name : srt_multType := x_get()
          ]|
        case name-is-abstract; name-is-to-one:
          ebd_get* := ebd* |[
            function x_get() : srt_multType {
              return null;
            }
          ]|
        case name-is-abstract; name-is-to-many:
          ebd_get* := ebd* |[
            function x_get() : srt_multType {
              return List<Object>();
            }
          ]|
      end
    with // Getter, calcualted value Layer
      switch id
        case name-is-default-derived; (name-is-ondemand<+name-is-inline):
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              return x_calculate();
            }
          ]|
        case name-is-default-derived; name-is-incremental-eventual; name-is-to-one:
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              return x_cache;
            }
          ]|
        case name-is-default-derived; name-is-incremental-eventual; name-is-to-many: //TODO: get rid of this special case
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              return [en | en : srt_type in x_cache ]; // list comprehension to convert set or list to list
            }
          ]|
        case name-is-default-derived; name-is-ondemandinc; name-is-to-one; name-has-expr:
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              if(x_dirty==null || x_dirty){
                x_updateCache();
              }
              return x_cache;
            }
          ]|
        case name-is-default-derived; name-is-ondemandinc; name-is-to-many; name-has-expr: //TODO: get rid of this special case
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              if(x_dirty==null || x_dirty){
                x_updateCache();
              }
              return [en | en : srt_type in x_cache ]; // list comprehension to convert set or list to list
            }
          ]|
        case name-is-default-derived; name-is-ondemandinc; name-is-to-one; not(name-has-expr):
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              return x_cache;
            }
          ]|
        case name-is-default-derived; name-is-ondemandinc; name-is-to-many; not(name-has-expr): //TODO: get rid of this special case
          ebd_getCalculated* := ebd* |[
            function x_getCalculated() : srt_multType {
              return [en | en : srt_type in x_cache ]; // list comprehension to convert set or list to list
            }
          ]|
        otherwise:
          ebd_getCalculated* := []
      end
    with // Expressions + Data Flows Layer
      switch id
        case name-is-default-derived; name-has-expr:
          ebd_calculate* := ebd* |[
            function x_calculate() : srt_multType {
              return e_calculate;
            }
          ]|
        case name-is-default-derived; not(name-has-expr):
          ebd_calculate* := ebd* |[
            function x_calculate() : srt_multType {
              return null; //TODO: throw exception
            }
          ]|
        otherwise:
          ebd_calculate* := []
      end
    with
      switch id
        case name-is-root:
          ebd_dirtyFlagFlows* := ebd* |[          
            function x_dirtyFlagFlows() {
              stat_flowsTo*
            }
          ]|
        otherwise:
          ebd_dirtyFlagFlows* := ebd* |[          
            function x_dirtyFlagFlows() {
              super.x_dirtyFlagFlows();
              stat_flowsTo*
            }
          ]|
      end
    with
      switch id
        case name-is-incremental-eventual; name-is-default-derived:
          ebd_flagDirty* := ebd* |[
            static function x_flagDirty(en : x_entityName) {
              if(en != null){
                x_qualifiedDirty.add(en);
              }
            }
            
            static function x_flagDirty(ens : [x_entityName]) {
              x_qualifiedDirty.addAll(ens);
            }
            
            extend function x_entityName(){ // flag dirty in constructor
              x_entityName.x_flagDirty(this);
            }
          ]|
        case name-is-ondemandinc; name-is-default-derived:
          ebd_flagDirty* := ebd* |[
            function x_flagDirty() {
              if(x_dirty==null || !x_dirty){
                x_dirty := true;
                x_dirtyFlagFlows();
              }
            }
            
            static function x_flagDirty(en : x_entityName) {
              if(en != null){
                en.x_flagDirty();
              }
            }
            
            static function x_flagDirty(ens : [x_entityName]) {
              for(en:x_entityName in ens){
                en.x_flagDirty();
              }
            }
            
            // not flag dirty in constructor, dirty field is initialized with true
          ]|
        otherwise:
          ebd_flagDirty* := []
      end
    with // Data Structure Layer
      switch id
        case name-is-left; name-is-zeroorone; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : srt_type (inverse=x_inverseEntityName.x_inverseName)
          ]|
        case name-is-left; name-is-one; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : srt_type (inverse=x_inverseEntityName.x_inverseName, validate(x_get() != null, "" + e_name + " is required."))
          ]|
        case name-is-left; name-is-to-many-ordered; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : [srt_type] (inverse=x_inverseEntityName.x_inverseName)
          ]|
        case name-is-left; name-is-to-many-unordered; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : {srt_type} (inverse=x_inverseEntityName.x_inverseName)
          ]|
        case (name-is-right + is-attributename); name-is-zeroorone; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : srt_type (default=null)
          ]|
        case (name-is-right + is-attributename); name-is-one; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : srt_type (default=null, validate(x_get() != null, "" + e_name + " is required."))
          ]|
        case (name-is-right + is-attributename); name-is-to-many-ordered; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : [srt_type]
          ]|
        case (name-is-right + is-attributename); name-is-to-many-unordered; name-is-normal-default-parent-not:
          ebd_field* := ebd* |[
            x_name : {srt_type}
          ]|
        otherwise:
          ebd_field* := []
      end
    with
      switch id
        case name-is-left; name-is-to-one; name-is-default-derived-ondemandinc-incremental-eventual-parent-not:
          ebd_cacheField* := ebd* |[
            x_cache : srt_type (inverse=x_inverseEntityName.x_inverseCache)
          ]|
        case name-is-left; name-is-to-many-ordered; name-is-default-derived-ondemandinc-incremental-eventual-parent-not:
          ebd_cacheField* := ebd* |[
            x_cache : [srt_type] (inverse=x_inverseEntityName.x_inverseCache)
          ]|
        case name-is-left; name-is-to-many-unordered; name-is-default-derived-ondemandinc-incremental-eventual-parent-not:
          ebd_cacheField* := ebd* |[
            x_cache : {srt_type} (inverse=x_inverseEntityName.x_inverseCache)
          ]|
        case (name-is-right + is-attributename); name-is-to-one; name-is-default-derived-ondemandinc-incremental-eventual-parent-not:
          ebd_cacheField* := ebd* |[
            x_cache : srt_type (default=null)
          ]|
        case (name-is-right + is-attributename); name-is-to-many-ordered; name-is-default-derived-ondemandinc-incremental-eventual-parent-not:
          ebd_cacheField* := ebd* |[
            x_cache : [srt_type]
          ]|
        case (name-is-right + is-attributename); name-is-to-many-unordered; name-is-default-derived-ondemandinc-incremental-eventual-parent-not:
          ebd_cacheField* := ebd* |[
            x_cache : {srt_type}
          ]|
        otherwise:
          ebd_cacheField* := []
      end
    with
      switch id
        case name-is-default-derived-ondemandinc-parent-not:
          ebd_dirty* := ebd* |[
            x_dirty : Bool (default=true)
          ]|
        otherwise:
          ebd_dirty* := []
      end
    with
      result := ebd* |[
        ebd_isUpToDate*
        ebd_updateCache*
        ebd_updateAllCache*
        ebd_flagDirtyAsync*
        ebd_setIncremental*
        ebd_setCacheIncr*
        ebd_getStatic*
        ebd_get*
        ebd_getCalculated*
        ebd_calculateTiersplitVar*
        ebd_calculate*
        ebd_dirtyFlagFlows*
        ebd_flagDirty*
        ebd_field*
        ebd_cacheField*
        ebd_dirty*
      ]|

rules
      
  var-to-webdsl-function(err): TierSplit(name, expr) -> result
    with
      x_getVar     := <name-get>name;
      srt_multType := <expr-to-webdsl-srt(err)>expr;
      e_calculate  := <expr-to-webdsl-expr(err)> expr
    with
      result := ebd |[
        function x_getVar() : srt_multType {
          return e_calculate;
        }
      ]|

rules

  model-pathexpr-to-webdsl-stm(err): pathexpr -> result
    with
      x_attributeName := <pathexpr-last>pathexpr;
      x_entityName    := <attributename-get-entityname>x_attributeName;
      x_flagDirty     := <name-flagdirty>x_attributeName;
      e_path          := <pathexpr-shorten-safe;expr-to-webdsl-expr(err)>pathexpr
    with
      result := stat |[
        x_entityName.x_flagDirty(e_path);
      ]|

rules

  model-shortcutname-to-webdsl-ebds(err): x_shortcutName -> ebd_getShortcut*
    where
      is-shortcutname
    with
      x_sourceEntityName := <attributename-get-entityname>x_shortcutName;
      x_targetEntityName := <name-get-type>x_shortcutName;
      x_inverseName      := <shortcutname-get-inversename>x_shortcutName;
      x_roleName         := <shortcutname-get-rolename>x_shortcutName;
      x_relationName     := <attributename-get-entityname>x_roleName;
      x_getShortcut      := <name-get>x_shortcutName;
      x_getInverse       := <name-get>x_inverseName;
      x_getRole          := <name-get>x_roleName
    with
      if name-is-to-one then
        ebd_getShortcut* := ebd* |[
          function x_getShortcut() : x_targetEntityName {
            return x_relationName.x_getRole(this.x_getInverse());
          }
          
          static function x_getShortcut(en: x_sourceEntityName) : x_targetEntityName {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(en));
          }
          
          static function x_getShortcut(ens : [x_sourceEntityName]) : [x_targetEntityName] {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(ens));
          }
        ]|
      else
        ebd_getShortcut* := ebd* |[
          function x_getShortcut() : [x_targetEntityName] {
            return x_relationName.x_getRole(this.x_getInverse());
          }
          
          static function x_getShortcut(en: x_sourceEntityName) : [x_targetEntityName] {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(en));
          }
          
          static function x_getShortcut(ens : [x_sourceEntityName]) : [x_targetEntityName] {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(ens));
          }
        ]|
      end
