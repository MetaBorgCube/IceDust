module generating/webdsl/expressions

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
  signatures/Data-sig
  signatures/Expressions-sig  
//  desugaring/constructors
  tiersplit/constructors

imports // functions

  api/_runtime  
  api/module-names-api
  api/types-api
  generating/_ir/expressions
  generating/webdsl/model
  generating/webdsl/data
  generating/webdsl/types
//  names/naming/names
  generating/_ir/model

rules // WebDSL specific: no generics, explicit casts
  
  webdsl-lib-call-cast = ?If(_,_,_)

  webdsl-lib-call-cast = ?Merge(_, _)
  webdsl-lib-call-cast = ?ChoiceLeft(_, _)
  
  webdsl-lib-call-cast = ?First(_)
  webdsl-lib-call-cast = ?First(_,_)
  webdsl-lib-call-cast = ?ElemAt(_,_)

rules // lib expression calls
  
  expr-to-webdsl-expr(err): e -> result
    where
      lib-call
    with
      arg*            := <get-arguments>e;
      e1*             := <map(expr-to-webdsl-expr(err))>arg*;
      x_methodpostfix := <lib-method-name>e;
      if <webdsl-lib-call-cast> e then
        srt1          := <name-to-webdsl-srt(err)>e;
        result := exp |[
          Expressions.x_methodpostfix(e1*) as srt1
        ]|
      else
        result := exp |[
          Expressions.x_methodpostfix(e1*)
        ]|
      end
  
rules // literals
  
  expr-to-webdsl-expr(err): LitString(str1)                 -> String(str1)
  expr-to-webdsl-expr(err): Int(i_1)                        -> webdsl:e |[ i_1 ]|
  expr-to-webdsl-expr(err): Float(f_1)                      -> Float(f_1)//webdsl:e |[ f_1 ]|
  expr-to-webdsl-expr(err): True()                          -> webdsl:e |[ true ]|
  expr-to-webdsl-expr(err): False()                         -> webdsl:e |[ false ]|
  expr-to-webdsl-expr(err): Datetime(str1)                  -> webdsl:e |[Expressions.parseDatetime(e1)]| with e1 := String(str1)
  expr-to-webdsl-expr(err): NoValue()                       -> webdsl:e |[ null ]|

rules // casts
  
  expr-to-webdsl-expr(err): Cast(NoValue() , ex1-ty) -> exp |[ null as x ]| where x := <type-to-string-webdsl>ex1-ty
  
  expr-to-webdsl-expr(err): Cast(ex1, ex1-ty) -> exp |[ Expressions.x_method(e1) ]|
    with
      e1 := <expr-to-webdsl-expr(err)>ex1;
      x_method := $[as[<postfix-id>ex1-ty]]

rules // filter

  expr-to-webdsl-expr(err): Filter(ex1, x_var, ex2) -> result
    with
      e1 := <expr-to-webdsl-expr(err)>ex1;
      e2 := <expr-to-webdsl-expr(err)>ex2;
      srt1 := <get-type2;type-to-webdsl-srt(err)>ex1
    with
      result := exp |[
        [ x_var | x_var : srt1 in e1 where Expressions.nullSafeBoolean(e2)]
      ]|

rules // order by

  expr-to-webdsl-expr(err): OrderBy(ex1, x_var, ex2) -> result
    with
      e1 := <expr-to-webdsl-expr(err)>ex1;
      e2 := <expr-to-webdsl-expr(err)>ex2;
      srt1 := <get-type2;type-to-webdsl-srt(err)>ex1
    with
      result := exp |[
        [ x_var | x_var : srt1 in e1 order by e2]
      ]|

rules // find

  expr-to-webdsl-expr(err): Find(ex1, x_var, ex2) -> result
    with
      e1 := <expr-to-webdsl-expr(err)>ex1;
      e2 := <expr-to-webdsl-expr(err)>ex2;
      srt1 := <get-type2;type-to-webdsl-srt(err)>ex1
    with
      result := exp |[
        Expressions.first([ x_var | x_var : srt1 in e1 where Expressions.nullSafeBoolean(e2)]) as srt1
      ]|

rules // filter type

  expr-to-webdsl-expr(err): e@FilterType(ex1, ty1) -> result
    where
      <get-multiplicity;upper-one>ex1
    with
      e1 := <expr-to-webdsl-expr(err)>ex1;
      srt2 := <get-type2;type-to-webdsl-srt(err)>e
    with
      result := exp |[
        if(e1 is a srt2) e1 as srt2 else null
      ]|

  expr-to-webdsl-expr(err): e@FilterType(ex1, ty1) -> result
    where
      <get-multiplicity;upper-many>ex1
    with
      e1 := <expr-to-webdsl-expr(err)>ex1;
      srt1 := <get-type2;type-to-webdsl-srt(err)>ex1;
      srt2 := <get-type2;type-to-webdsl-srt(err)>e
    with
      result := exp |[
        [a as srt2 | a : srt1 in e1 where (a is a srt2)]
      ]|
