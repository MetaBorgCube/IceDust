module generating/webdsl/module

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
//  desugaring/constructors
  signatures/Types-sig
  analysis2/path
  tiersplit/constructors

imports // functions
  
  generating/_ir/model 
  generating/webdsl/module-derivations
  generating/webdsl/module-manage
  generating/webdsl/module-ui
  generating/webdsl/model
  generating/webdsl/data
  generating/webdsl/types
  api/model-names-api
  api/module-api
  api/module-names-api
  lib/lists-tuples
  lib/string

rules // module

  modulename-to-webdsl-application(err): x_moduleName -> result
    where
      <is-modulename> x_moduleName
    with
      def_model*     := <modulename-get-entitynames; map(model-entityname-to-webdsl-def(err))>x_moduleName;
      stat_initdata* := <data-modulename-to-webdsl-stms(err)>x_moduleName
    with
      if modulename-is-explorerui then
        def_crud*      := <modulename-get-entitynames;fmap(entityname-to-webdsl-defs)>x_moduleName;
        elem_menu*     := <modulename-get-entitynames; map(entityname-to-webdsl-elem)>x_moduleName
      end
    with
      def_dirtyReqVar* := <modulename-get-arrinames-default-derived-incremental-eventual;map(attributename-to-webdsl-def)>x_moduleName;
      stat_cach*       := <cache-modulename-to-webdsl-stms>x_moduleName
    with
      stat_flagasync*    := <modulename-get-arrinames-default-derived-eventual;map(attributename-to-webdsl-stat)>x_moduleName;
      native1*           := <modulename-get-arrinames-default-derived-eventual;map(attributename-to-webdsl-native)>x_moduleName;
      stat_cachAsync*    := <cache-async-modulename-to-webdsl-stms>x_moduleName
    with
      elem_manageRows*    := <modulename-get-arrinames-topo-default-derivation;flatten-list; map(membername-to-webdsl-elem-row   )>x_moduleName;
      def_manage*         := <modulename-get-arrinames-topo-default-derivation;flatten-list;fmap(membername-to-webdsl-defs-manage)>x_moduleName
    with
      sec_modelData* := section* |[
        section data
          
          init {
            stat_initdata*
          }
        
        section model
        
          def_model*
      ]|
    with
      if modulename-is-explorerui then
        sec_ui* := section* |[
          section ui
          
            define applicationmenu() {
              elem_menu*
            }
            
            def_crud*
        ]|
      end
    with
      sec_cachesDirtyflag* := section* |[
        section caches and dirty flags
        
          def_dirtyReqVar*
          
          function updateDerivations(){
            stat_cach*
          }
      ]|
    with
      sec_asyncDirtyflag* :=  section* |[
        section async dirty flags
          
          function flagDirtyAsync(){
            stat_flagasync*
          }
          
          function updateDerivationsAsync(){
            stat_cachAsync*
            DirtyCollections.cleanI(2147483647);
          }
          
          invoke updateDerivationsAsync() every 1 milliseconds
          
          native class derivations.DirtyCollections as DirtyCollections {
            static getI() : Int
            static dirtyI(Int)
            static cleanI(Int)
          
            native1*
          }
      ]|
    with
      sec_hibernateTriggers* :=  section* |[
        section triggers
      
          function beforeTransactionCompletion(){
            updateDerivations();
            flush();
          }
          
          function afterTransactionCompletionCommitted(){
            flagDirtyAsync();
          }
      ]|
    with
      sec_manage* :=  section* |[
        section manage
        
          page derivedvalues() {
            title{ "Manage Derived Values" }
            h1{ "Manage Derived Values" }
            table{
              row{
                column{ "Order" }
                column{ "Name" }
                column{ "Type" }
                column{ "Status" }
                column{ "Actions" }
              }
              row{
                column{  }
                column{  }
                column{  }
                column{  }
                column{
                  submit action{
                    flagAllIncrementalDirty();
                    log("Updating derivations");
                    updateDerivations();
                    log("Updating derivations done");
                  } { "flag all incremental fields dirty" }
                  br
                  submit action{
                    flagAllOnDemandIncDirty();
                  } { "flag all on-demand incremental fields dirty" }
                }
              }
              elem_manageRows*
            }
          }
          
          def_manage*
          
          function flagAllIncrementalDirty(){}
          
          function flagAllOnDemandIncDirty(){}
      ]|
    with
      if modulename-is-explorerui then
        result := application |[
          application x_moduleName
        
          imports lib/icedust/modelexplorer-ui
          imports lib/icedust/non-required-inputs
          imports lib/icedust/Expressions
      
          sec_modelData*
          
          sec_ui*
        
          sec_cachesDirtyflag*
        
          sec_asyncDirtyflag*
        
          sec_hibernateTriggers*
        
          sec_manage*
        ]|
      else //embedded model
        result := module |[
          module x_moduleName
        
          imports lib/icedust/Expressions
      
          sec_modelData*
        
          sec_cachesDirtyflag*
        
          sec_asyncDirtyflag*
        
          sec_hibernateTriggers*
        
          sec_manage*
          
            access control rules
            
              rule page derivedvalues() { true }
        ]|
      end
