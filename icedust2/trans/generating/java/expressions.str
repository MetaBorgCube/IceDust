module generating/java/expressions

imports // constructors

  java/Java
  signatures/Expressions-sig

imports // functions

  api/_runtime
  generating/_ir/expressions
  generating/java/expressions-references
  generating/java/types
  lib/lists-tuples
  lib/string
  lib/traverse
//  names/naming/names

rules // lib expression calls  // (rel-expr, int) -> (java-stm*, java-expr)
  
  exp-to-java-stm(err|i): e -> result
    where
      lib-call
    with
      arg*                    := <get-arguments>e;
      (arg-java, l)           := <map-fold(arg-to-java-stm(err))>(arg*, i);
      (args-stms*, arg-exps*) := <unzip;(flatten-list,id)>arg-java;
      refty                   := <expr-to-java-type(err)>e;
      x_var                   := $[var[<inc>l]];
      x_methodpostfix         := <lib-method-name>e
    with
      result := (
        bstm*|[
          ~args-stms*
          refty x_var = Expressions.x_methodpostfix(~arg-exps*);
        ]|,
        expr |[
          x_var
        ]|
      )

rules // (rel-expr, int) -> ((java-stm*, java-expr), int)

  arg-to-java-stm(err) : (e, i) -> ((stms, exp), i')
    with
      (stms, exp) := <exp-to-java-stm(err|i)>e;
      i' := <add>(i, <length>stms)

rules // literals
  
  exp-to-java-stm(err|i): LitString(value)      -> ([], Lit(String([Chars(value)])))
  exp-to-java-stm(err|i): Int(value)            -> ([], Lit(Deci(value)))
  exp-to-java-stm(err|i): Float(value)          -> ([], Lit(Float($[[value]f])))
  exp-to-java-stm(err|i): True()                -> ([], Lit(True()))
  exp-to-java-stm(err|i): False()               -> ([], Lit(False()))
  exp-to-java-stm(err|i): Datetime(value)       -> ([], expr |[Expressions.parseDatetime(e1)]|) with e1 := Lit(String([Chars(value)]))
  exp-to-java-stm(err|i): NoValue()             -> ([], expr |[null]|)

rules // casts
  
  exp-to-java-stm(err|i): e@Cast(NoValue(), e1-ty) -> ([], expr |[(x)null]|) with x := <type-to-string-java>e1-ty
  
  exp-to-java-stm(err|i): e@Cast(e1, e1-ty) -> (stms, exp)
    with
      (exp1s*, exp1j) := <exp-to-java-stm(err|i)>e1;
      j := <add>(i, <length>exp1s*);
      refty := <expr-to-java-type(err)>e;
      x_var := $[var[<inc>j]];
      x_method := $[as[<type-to-string-java>e1-ty]]
    with
      stms := bstm*|[
        ~exp1s*
        refty x_var = Expressions.x_method(~exp1j);
      ]|;
      exp := expr |[x_var]|

rules // filter expression

  exp-to-java-stm(err|i): e@Filter(e1, x_loopvar, e2) -> result
    with
      (e1stms*, e1exp) := <exp-to-java-stm(err|i)>e1;
      i' := <add>(i, <length>e1stms*);
      i'' := <inc>i';
      x_var := $[var[i'']];
      (e2stms*, e2exp) := <exp-to-java-stm(err|i'')>e2;
      refty := <expr-to-java-type(err)>e;
      x_type := <get-type2;type-to-java-type(err)>e
    with
      result := (
        bstm*|[
          ~e1stms*
          refty x_var = Expressions.emptyCollection();
          for(x_type x_loopvar : ~e1exp){
            ~e2stms*
            if(~e2exp!=null && ~e2exp)
              x_var.add(x_loopvar);
          }
        ]|,
        expr |[
          x_var
        ]|
      )

rules // order by expression

  exp-to-java-stm(err|i): e@OrderBy(e1, x_compvar, e2) -> result
    with
      (e1stms*, e1exp) := <exp-to-java-stm(err|i)>e1;
      i' := <add>(i, <length>e1stms*);
      i'' := <inc>i';
      x_var := $[var[i'']];
      (e2stms*, e2exp) := <exp-to-java-stm(err|i'')>e2;
      refty := <expr-to-java-type(err)>e;
      refty2 := <expr-to-java-type(err)>e2;
      x_type := <get-type2;type-to-java-type(err)>e;
      x_comptype := <get-type2;type-to-java-type(err)>e2
    with
      result := (
        bstm*|[
          ~e1stms*
          ArrayList<x_type> x_var = new ArrayList<x_type>();
          x_var.addAll(~e1exp);
          x_var.sort(new Comparator<x_type>() {
            public int compare(x_type obj1, x_type obj2) {
              return getVal(obj1).compareTo(getVal(obj2));
            }
            private refty2 getVal(Bar x_compvar){
              ~e2stms*
              return ~e2exp;
            }
          });
//          Collections.sort(x_var, new Comparator<x_type>() {
//            public int compare(x_type obj1, x_type obj2) {
//              return getVal(obj1).compareTo(getVal(obj2));
//            }
//            private x_comptype getVal(x_type x_compvar){
//              ~e2stms*
//              return ~e2exp;
//            }
//          });
        ]|,
        expr |[
          x_var
        ]|
      )

rules // find expression

  exp-to-java-stm(err|i): e@Find(e1, x_loopvar, e2) -> result
    with
      (e1stms*, e1exp) := <exp-to-java-stm(err|i)>e1;
      i' := <add>(i, <length>e1stms*);
      i'' := <inc>i';
      x_var := $[var[i'']];
      (e2stms*, e2exp) := <exp-to-java-stm(err|i'')>e2;
      refty := <expr-to-java-type(err)>e;
      x_type := <get-type2;type-to-java-type(err)>e
    with
      result := (
        bstm*|[
          ~e1stms*
          refty x_var = null;
          for(x_type x_loopvar : ~e1exp){
            ~e2stms*
            if(~e2exp!=null && ~e2exp){
              x_var = x_loopvar;
              break;
            }
          }
        ]|,
        expr |[
          x_var
        ]|
      )

rules // filter type

  exp-to-java-stm(err|i): e@FilterType(e1, e1-ty) -> (stms, exp)
    with
      (exp1s*, exp1j) := <exp-to-java-stm(err|i)>e1;
      j := <add>(i, <length>exp1s*);
      refty := <expr-to-java-type(err)>e;
      x_var := $[var[<inc>j]];
      x_type := <get-type2;type-to-java-type(err)>e
    with
      stms := bstm*|[
        ~exp1s*
        refty x_var = Expressions.filterType(~exp1j,x_type.class);
      ]|;
      exp := expr |[x_var]|

rules

  exp-to-java-stm(err|i): a -> (a', a')
  where
    a' := <err>$[No exp-to-java-stm defined for [<get-constructor> a]/[<get-arguments;length> a].]

