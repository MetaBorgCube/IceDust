module data

rules

  [[ EntityInstance(name, type, ms) ^ (member_value_scope, module_scope) : type_type ]] :=
    Member{name} <- module_scope,
    Member{name} =I=> entity_instance_scope,
    Member{name}.ns := EntityInstance(),
    Member{name}.side := None(),
    new entity_instance_scope,
    [[ type ^ (module_scope) : type_type ]],
    Member{name} : TTuple(type_type, TOne(), TIncremental()),
    Implicit{"this"} <- entity_instance_scope,
    Implicit{"this"} : type_type,
    Map2 [[ ms ^ (entity_instance_scope, module_scope) ]].

  [[ EntityInstanceNoType(name, ms) ^ (member_value_scope, module_scope) : member_value_def_type ]] :=
    Member{name} <- module_scope,
    Member{name} =I=> entity_instance_scope,
    Member{name}.ns := EntityInstance(),
    Member{name}.side := None(),
    new entity_instance_scope,
    Implicit{"membervalue"} -> member_value_scope,
    Implicit{"membervalue"} |-> member_value_def,
    member_value_def : member_value_def_type,
    member_value_def.reltype := relation_object_type,
    Member{name} : TTuple(member_value_def_type, TOne(), TIncremental()),
    Implicit{"this"} <- entity_instance_scope,
    Implicit{"this"} : member_value_def_type,
    Map2 [[ ms ^ (entity_instance_scope, module_scope) ]].
    
  [[ RelationInstance(name, type, ms) ^ (member_value_scope, module_scope) : type_type ]] :=
    Member{name} <- module_scope,
    Member{name} =I=> entity_instance_scope,
    Member{name}.ns := EntityInstance(),
    Member{name}.side := None(),
    new entity_instance_scope,
    [[ type ^ (module_scope) : type_type ]],
    Member{name} : TTuple(type_type, TOne(), TIncremental()),
    Implicit{"this"} <- entity_instance_scope,
    Implicit{"this"} : type_type,
    Map2 [[ ms ^ (entity_instance_scope, module_scope) ]],
    Implicit{"membervalue"} -> member_value_scope,
    Implicit{"membervalue"} |-> member_value_def,
    member_value_def : member_value_def_type,
    member_value_def.reltype := relation_object_type,
    relation_object_type == type_type.
    
  [[ RelationInstanceNoType(name, ms) ^ (member_value_scope, module_scope) : relation_object_type ]] :=
    Member{name} <- module_scope,
    Member{name} =I=> entity_instance_scope,
    Member{name}.ns := EntityInstance(),
    Member{name}.side := None(),
    new entity_instance_scope,
    Implicit{"membervalue"} -> member_value_scope,
    Implicit{"membervalue"} |-> member_value_def,
    member_value_def : member_value_def_type,
    member_value_def.reltype := relation_object_type,
    Member{name} : TTuple(relation_object_type, TOne(), TIncremental()),
    Implicit{"this"} <- entity_instance_scope,
    Implicit{"this"} : relation_object_type,
    Map2 [[ ms ^ (entity_instance_scope, module_scope) ]].
    
  [[ MemberValue(member, vs) ^ (entity_instance_scope, module_scope) ]] :=
    Lala [[ vs ^ (member_value_scope, module_scope) : member_def_type ]],
    MemberValue{member} <- entity_instance_scope,
    MemberValue{member}.ns := MemberValue(),
    MemberValue{member}.origin := member_def,
    Implicit{"this"} -> entity_instance_scope,
    Implicit{"this"} |-> this_def,
    this_def : this_type,
    this_type == TEntity(this_type_entity),
    this_type_entity ?=I=> entity_scope,
    new new_scope,
    new_scope -I-> entity_scope,
    Member{member} -> new_scope,
    Member{member} |-> member_def,
    member_def : TTuple(member_def_type, member_def_mult, member_def_strat),
    member_def.reltype := relation_object_type,
    new member_value_scope,
    Implicit{"membervalue"} <- member_value_scope,
    Implicit{"membervalue"} : member_def_type,
    Implicit{"membervalue"}.reltype := relation_object_type.

  Lala [[ [x|xs] ^ (member_value_scope, module_scope) : member_def_type ]] :=
    [[ x  ^ (member_value_scope, module_scope) : ei_type ]],
    ei_type <sub? member_def_type | error $[Type error: expected [member_def_type] got [ei_type].]@x,
    Lala [[ xs ^ (member_value_scope, module_scope) : member_def_type ]].

  Lala [[ [] ^ (member_value_scope, module_scope) : member_def_type ]].

  [[ EntityInstanceWrapper(ri, ei) ^ (member_value_scope, module_scope) : ei_type ]] :=
    [[ ri ^ (member_value_scope, module_scope) : ri_type ]],
    [[ ei ^ (member_value_scope, module_scope) : ei_type ]].
  
  [[ EntityInstanceRef(ei) ^  (member_value_scope, module_scope) : ei_type ]] :=
    Member{ei} -> module_scope,
    Member{ei} |-> ei_def,
    ei_def : TTuple(ei_type, ei_mult, ei_strat).
    
  [[ LitVal(e) ^  (member_value_scope, module_scope) : e_type ]] :=
    [[ e ^ (module_scope) : TTuple(e_type, e_mult, e_strat) ]].
