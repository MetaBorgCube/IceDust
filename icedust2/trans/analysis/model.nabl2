module model

rules

  // modeling partial classes through importing Entity2{e}
  // modeling inheritance through importing Entity{parent}
  //
  // module_scope ---> Entity2{e}
  //   |         ^
  //   |          \
  //   |           P
  //   v            \
  // Entity{e} =I=> entity_scope ---> Implicit{"this"}
  //               /       \       __^  ^
  //              I         J  __/      |
  //             /      __/  \          |
  //            v     /       v         |
  // entity_scope_local      entity_scope_inherit
  //   |          ||              ||
  //   |          I               I
  //   |          ||              ||
  //   v          v               v
  // Member{m}  Entity2{e}   Entity{parent}

  [[ Entity(e, parents, st, as) ^ (module_scope) ]] :=
    distinct/name W(entity_scope_local)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut names." @NAMES, //currently sees all names, also through -N->, will be fixed
    distinct/name V(entity_scope_inherit)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut import"@parents,
    Entity{e} <- module_scope,
    entity_scope -P-> module_scope,
    Entity{e} =I=> entity_scope,
    e_type == TEntity(Entity{e}),
    Entity{e} : e_type,

    e_type <test! IsType(),
    e_type <test! CanCompare(),
    TString() <cast! e_type,
    TNoValue() <sub! e_type,

    Entity{e}.ns := Entity(),
//    Implicit{"this"} <- entity_scope,
    Implicit{"this"} <- entity_scope_local,
//    Implicit{"this"} <- entity_scope_inherit,
    Implicit{"this"} : TTuple(TEntity(Entity{e}), TOne(), e_strat),
    [[ st ^ (module_scope) : e_strat ]],
    Map3 [[ as ^ (entity_scope_local, entity_scope, module_scope) ]],
    Entity2{e} -> module_scope,   // matches 0 or more times, one for each relation (like partial class definition)
    Entity2{e} <=I= entity_scope_local, // import all from that reference
    new entity_scope,
    
    Entity{e}.constructor := Entity(),
    new entity_scope_local,
    entity_scope -I-> entity_scope_local,
//    entity_scope_local -N-> entity_scope, // be able to query the entity_scope from entity_scope_local, edge does nothing
    new entity_scope_inherit,
    entity_scope -J-> entity_scope_inherit,
    Extends [[parents ^ (entity_scope, entity_scope_inherit)]].

  [[ FirstClassRelation(e, parents, st, as) ^ (module_scope) ]] := // identical to Entity
    distinct/name W(entity_scope_local)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut names." @NAMES,
    distinct/name V(entity_scope_inherit)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut import"@parents,
    Entity{e} <- module_scope,
    entity_scope -P-> module_scope,
    Entity{e} =I=> entity_scope,
    e_type == TEntity(Entity{e}),
    Entity{e} : e_type,

    e_type <test! IsType(),
    e_type <test! CanCompare(),
    TString() <cast! e_type,
    TNoValue() <sub! e_type,

    Entity{e}.ns := Entity(),
//    Implicit{"this"} <- entity_scope,
    Implicit{"this"} <- entity_scope_local,
//    Implicit{"this"} <- entity_scope_inherit,
    Implicit{"this"} : TTuple(TEntity(Entity{e}), TOne(), e_strat),
    [[ st ^ (module_scope) : e_strat ]],
    Map3 [[ as ^ (entity_scope_local, entity_scope, module_scope) ]],
    Entity2{e} -> module_scope,   // matches 0 or more times, one for each relation (like partial class definition)
    Entity2{e} <=I= entity_scope_local, // import all from that reference
    new entity_scope,
    
    Entity{e}.constructor := Relation(),
    new entity_scope_local,
    entity_scope -I-> entity_scope_local,
//    entity_scope_local -N-> entity_scope, // be able to query the entity_scope from entity_scope_local, edge does nothing
    new entity_scope_inherit,
    entity_scope -J-> entity_scope_inherit,
    Extends [[parents ^ (entity_scope, entity_scope_inherit)]].

//  [[ Trait(e, parents, st, as) ^ (module_scope) ]] := // identical to Entity
//    distinct/name W(entity_scope_local)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut names." @NAMES,
//    distinct/name V(entity_scope_inherit)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut import"@parents,
//    Entity{e} <- module_scope,
//    entity_scope -P-> module_scope,
//    Entity{e} =I=> entity_scope,
//    e_type == TEntity(Entity{e}),
//    Entity{e} : e_type,
//
//    e_type <test! IsType(),
//    e_type <test! CanCompare(),
//    TString() <cast! e_type,
//    TNoValue() <sub! e_type,
//
//    Entity{e}.ns := Entity(),
//    Implicit{"this"} <- entity_scope,
//    Implicit{"this"} <- entity_scope_local,
//    Implicit{"this"} <- entity_scope_inherit,
//    Implicit{"this"} : TTuple(TEntity(Entity{e}), TOne(), e_strat),
//    [[ st ^ (module_scope) : e_strat ]],
//    Map3 [[ as ^ (entity_scope_local, entity_scope, module_scope) ]],
//    Entity2{e} -> module_scope,   // matches 0 or more times, one for each relation (like partial class definition)
//    Entity2{e} <=I= entity_scope_local, // import all from that reference
//    new entity_scope,
//    
//    Entity{e}.constructor := Trait(),
//    new entity_scope_local,
//    entity_scope -I-> entity_scope_local,
//    entity_scope_local -N-> entity_scope, // be able to query the entity_scope from entity_scope_local, edge does nothing
//    new entity_scope_inherit,
//    entity_scope -J-> entity_scope_inherit,
//    Extends [[parents ^ (entity_scope, entity_scope_inherit)]].
    
  Extends [[ None() ^ (entity_scope, entity_scope_inherit) ]] :=
    true.
    
//  Extends [[ OptionalExtends(parents_list) ^ (entity_scope, entity_scope_inherit) ]] :=
//    Map2 [[ parents_list ^ (entity_scope, entity_scope_inherit) ]].
//  
//  [[ Extends(parent) ^ (entity_scope, entity_scope_inherit) ]] :=
//    Entity{parent} -> entity_scope,
//    Entity{parent} <=I= entity_scope_inherit,
//    Entity{parent} |-> parent_def,
//    parent_def : TEntity(parent_entity),
//    parent_def.constructor := Trait() | error "Only traits can be extended",
//    Implicit{"this"} -> entity_scope,
//    Implicit{"this"} |-> this_def,
//    this_def : TTuple(TEntity(entity), this_mu, this_st),
//    TEntity(entity) <sub! TEntity(parent_entity).
    
  Extends [[ OptionalExtends(Extends(parent)) ^ (entity_scope, entity_scope_inherit) ]] :=
    Entity{parent} -> entity_scope,
    Entity{parent} <=I= entity_scope_inherit,
    Entity{parent} |-> parent_def,
    parent_def : TEntity(parent_entity),
//    parent_def.constructor := Trait() | error "Only traits can be extended",
    Implicit{"this"} -> entity_scope,
    Implicit{"this"} |-> this_def,
    this_def : TTuple(TEntity(entity), this_mu, this_st),
    TEntity(entity) <sub! TEntity(parent_entity).
    
  [[ Attribute(a, t, m) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    Member{a} <- entity_scope_local,
    Member{a} : TTuple(a_type, a_mult, a_strat),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := a_deriv,
    Member{a}.reltype := None(),
    Member{a}.side := None(),
    Member{a}.calculationstrategy := a_strat,
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    a_strat == TIncremental(),
    a_deriv == Normal(),
    
    new s,
    Member{a} -> s,
    s -S-> entity_scope,
    s -I-> entity_scope,
    Member{a} |-> a_overridden,
    a_overridden : TTuple(a_overridden_type, a_overridden_mult, a_overridden_strat),
    a_overridden.derivationtype := a_overridden_deriv,
    a_overridden.inlining := NotInline() | error $[Error: overriding inlined field.]@a,
    a_type <sub? a_overridden_type | error $[Overriding type error: expected [a_overridden_type] got [a_type].]@t,
    a_mult <mulOrd? a_overridden_mult | error $[Overriding multiplicity error: expected [a_overridden_mult] got [a_mult].]@m,
    a_deriv <deriv? a_overridden_deriv | error $[Overriding derivation type error: expected [a_overridden_deriv] got [a_deriv].]@a.
       
  [[ AbstractAttribute(a, t, m, st) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    Member{a} <- entity_scope_local,
    Member{a} : TTuple(a_type, a_mult, a_strat),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := a_deriv,
    Member{a}.reltype := None(),
    Member{a}.side := None(),
    Member{a}.calculationstrategy := a_strat,
    Member{a}.inlining := NotInline(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ st^ (entity_scope) : a_strat ]],
    a_deriv == Abstract(),
    
    new s,
    Member{a} -> s,
    s -S-> entity_scope,
    s -I-> entity_scope,
    Member{a} |-> a_overridden,
    a_overridden : TTuple(a_overridden_type, a_overridden_mult, a_overridden_strat),
    a_overridden.derivationtype := a_overridden_deriv,
    a_overridden.inlining := NotInline() | error $[Error: overriding inlined field.]@a,
    a_type <sub? a_overridden_type | error $[Overriding type error: expected [a_overridden_type] got [a_type].]@t,
    a_mult <mulOrd? a_overridden_mult | error $[Overriding multiplicity error: expected [a_overridden_mult] got [a_mult].]@m,
    a_deriv <deriv? a_overridden_deriv | error $[Overriding derivation type error: expected [a_overridden_deriv] got [a_deriv].]@a.
    
  [[ DerivationAttribute(a, t, m, e, st) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    Member{a} <- entity_scope_local,
    Member{a} : TTuple(a_type, a_mult, a_strat),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := a_deriv,
    Member{a}.expr := e,
    Member{a}.reltype := None(),
    Member{a}.side := None(),
    Member{a}.calculationstrategy := a_strat,
    Member{a}.inlining := NotInline(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ st^ (entity_scope) : a_strat ]],
    a_deriv == Derivation(),
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult, e_strat) ]],
    e_type  <sub?    a_type  | error $[Type error: expected [a_type] got [e_type].]@e,
    e_mult  <mulOrd? a_mult  | error $[Multiplicity error: expected [a_mult] got [e_mult].]@e,
    e_strat <strat?  a_strat | error $[Calculation strategy error: expected [a_strat] got [e_strat].]@e,
    
    new s,
    Member{a} -> s,
    s -S-> entity_scope,
    s -I-> entity_scope,
    Member{a} |-> a_overridden,
    a_overridden : TTuple(a_overridden_type, a_overridden_mult, a_overridden_strat),
    a_overridden.derivationtype := a_overridden_deriv,
    a_overridden.inlining := NotInline() | error $[Error: overriding inlined field.]@a,
    a_type <sub? a_overridden_type | error $[Overriding type error: expected [a_overridden_type] got [a_type].]@t,
    a_mult <mulOrd? a_overridden_mult | error $[Overriding multiplicity error: expected [a_overridden_mult] got [a_mult].]@m,
    a_strat <strat? a_overridden_strat | error $[Overriding calculation strategy error: expected [a_overridden_strat] got [a_strat].]@st,
    a_deriv <deriv? a_overridden_deriv | error $[Overriding derivation type error: expected [a_overridden_deriv] got [a_deriv].]@a.
    
  [[ DefaultAttribute(a, t, m, e, st) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    Member{a} <- entity_scope_local,
    Member{a} : TTuple(a_type, a_mult, a_strat),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := a_deriv,
    Member{a}.expr := e,
    Member{a}.reltype := None(),
    Member{a}.side := None(),
    Member{a}.calculationstrategy := a_strat,
    Member{a}.inlining := NotInline(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ st^ (entity_scope) : a_strat ]],
    a_deriv == DefaultValue(),
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult, e_strat) ]],
    e_type  <sub?    a_type  | error $[Type error: expected [a_type] got [e_type].]@e,
    e_mult  <mulOrd? a_mult  | error $[Multiplicity error: expected [a_mult] got [e_mult].]@e,
    e_strat <strat?  a_strat | error $[Calculation strategy error: expected [a_strat] got [e_strat].]@e,
    
    new s,
    Member{a} -> s,
    s -S-> entity_scope,
    s -I-> entity_scope,
    Member{a} |-> a_overridden,
    a_overridden : TTuple(a_overridden_type, a_overridden_mult, a_overridden_strat),
    a_overridden.derivationtype := a_overridden_deriv,
    a_overridden.inlining := NotInline() | error $[Error: overriding inlined field.]@a,
    a_type <sub? a_overridden_type | error $[Overriding type error: expected [a_overridden_type] got [a_type].]@t,
    a_mult <mulOrd? a_overridden_mult | error $[Overriding multiplicity error: expected [a_overridden_mult] got [a_mult].]@m,
    a_strat <strat? a_overridden_strat | error $[Overriding calculation strategy error: expected [a_overridden_strat] got [a_strat].]@st,
    a_deriv <deriv? a_overridden_deriv | error $[Overriding derivation type error: expected [a_overridden_deriv] got [a_deriv].]@a.
    
  [[ InlineAttribute(a, t, m, e) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    Member{a} <- entity_scope_local,
    Member{a} : TTuple(a_type, a_mult, a_strat),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := a_deriv,
    Member{a}.expr := e,
    Member{a}.reltype := None(),
    Member{a}.side := None(),
    Member{a}.calculationstrategy := a_strat,
    Member{a}.inlining := Inline(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    e_strat == a_strat, // inline attributes take the strategy from their expression, this strategy is the strongest strategy that the attribute can be inlined in.
    a_deriv == Derivation(),
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult, e_strat) ]],
    e_type  <sub?    a_type  | error $[Type error: expected [a_type] got [e_type].]@e,
    e_mult  <mulOrd? a_mult  | error $[Multiplicity error: expected [a_mult] got [e_mult].]@e,
    
    new s,
    Member{a} -> s,
    s -S-> entity_scope,
    s -I-> entity_scope,
    Member{a} |-> Member{a} | error $[Error: overriding with (inline).]@a.
    
  [[ Relation(e1, r1, m1, m2, e2, r2) ^ (module_scope) ]] :=
    Entity2{e1} <- module_scope,
    Entity2{e1} =I=> entity1_scope,
    Member{r1} <- entity1_scope,
    Entity{e1} -> module_scope,
    Entity{e1} |-> e1_def,
    e1_def : e1_type,
    [[m1 ^ (module_scope) : m1_mult ]],
    Member{r1} : TTuple(e2_type, m1_mult, TIncremental()),
    Member{r1}.ns := Relation(),
    Member{r1}.inverse := r2,
    Member{r1}.side := Left(),
    Member{r1}.reltype := None(),
    Member{r1}.derivationtype := Normal(),
    Member{r1}.calculationstrategy := TIncremental(),
    Entity2{e2} <- module_scope,
    Entity2{e2} =I=> entity2_scope,
    Member{r2} <- entity2_scope,
    Entity{e2} -> module_scope,
    Entity{e2} |-> e2_def,
    e2_def : e2_type,
    [[m2 ^ (module_scope) : m2_mult ]],
    Member{r2} : TTuple(e1_type, m2_mult, TIncremental()),
    Member{r2}.ns := Relation(),
    Member{r2}.inverse := r1,
    Member{r2}.side := Right(),
    Member{r2}.reltype := None(),
    Member{r2}.derivationtype := Normal(),
    Member{r2}.calculationstrategy := TIncremental(),
    new entity1_scope,
    new entity2_scope.
    
  [[ RelationDerived(e1, r1, m1, expr, m2, e2, r2, st) ^ (module_scope) ]] :=
    Entity2{e1} <- module_scope,
    Entity2{e1} =I=> entity1_scope,
    Member{r1} <- entity1_scope,
    Entity{e1} -> module_scope,
    Entity{e1} |-> e1_def,
    e1_def : e1_type,
    [[m1 ^ (module_scope) : m1_mult ]],
    [[st ^ (module_scope) : st_strat ]],
    Member{r1} : TTuple(e2_type, m1_mult, st_strat),
    Member{r1}.ns := Relation(),
    Member{r1}.inverse := r2,
    Member{r1}.side := Left(),
    Member{r1}.reltype := None(),
    Member{r1}.derivationtype := Derivation(),
    Member{r1}.expr := expr,
    Member{r1}.calculationstrategy := st_strat,
    Member{r1}.inlining := NotInline(),
    Entity2{e2} <- module_scope,
    Entity2{e2} =I=> entity2_scope,
    Member{r2} <- entity2_scope,
    Entity{e2} -> module_scope,
    Entity{e2} |-> e2_def,
    e2_def : e2_type,
    [[m2 ^ (module_scope) : m2_mult ]],
    Member{r2} : TTuple(e1_type, m2_mult, st_strat),
    Member{r2}.ns := Relation(),
    Member{r2}.inverse := r1,
    Member{r2}.side := Right(),
    Member{r2}.reltype := None(),
    Member{r2}.derivationtype := Derivation(),
    Member{r2}.calculationstrategy := st_strat,
    Member{r2}.inlining := NotInline(),
    new entity1_scope,
    new entity2_scope,
    new expr_scope,
    Entity{e1} <=I= expr_scope,
    expr_scope -P-> module_scope,
    [[ expr ^ (expr_scope) : TTuple(expr_type, expr_mult, expr_strat) ]],
    m2 == ZeroOrMore() | warning $[Warning: multiplicity [m2] cannot be statically guaranteed.] @ m2,
    expr_type  <sub?    e2_type  | error $[Type error: expected [e2_type] got [expr_type].]@expr,
    expr_mult  <mulOrd? m1_mult  | error $[Multiplicity error: expected [m1_mult] got [expr_mult].]@expr,
    expr_strat <strat?  st_strat | error $[Calculation strategy error: expected [st_strat] got [expr_strat].]@expr.
    
  [[ Role(entity, inverse, mult, role) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    [[ mult ^ (entity_scope) : inverse_mult ]],
    Implicit{"this"} -> entity_scope,
    Implicit{"this"} |-> this_def,
    this_def : TTuple(this_type, this_mult, this_strat),
    Member{role} <- entity_scope_local,
    Member{role} : TTuple(entity_type, TOne(), TIncremental()),
    Member{role}.ns := Role(),
    Member{role}.inversemult := inverse_mult,
    Member{role}.inverse := inverse,
    Member{role}.reltype := None(),
    Member{role}.calculationstrategy := TIncremental(),
    Entity{entity} -> entity_scope,
    Entity{entity} |-> entity_def,
    entity_def : entity_type,
    Entity2{entity} <- module_scope,
    Entity2{entity} =I=> entity2_scope,
    Member{inverse} <- entity2_scope,
    Member{inverse} : TTuple(this_type, inverse_mult, TIncremental()),
    Member{inverse}.ns := Inverse(),
    Member{inverse}.role := role,
    Member{inverse}.reltype := None(),
    Member{inverse}.calculationstrategy := TIncremental(),
    new entity2_scope,
    Member2{role} -> entity_scope,
    Member2{role} <=I= entity2_scope, // import all shortcut definitions from the role associated scope into the entity2 scope
    true.
    
  [[ Shortcut(role1, shortcut1, role2, shortcut2) ^ (entity_scope_local, entity_scope, module_scope) ]] :=
    Member{role1} -> entity_scope,
    Member{role1} |-> role1_def,
    role1_def : TTuple(role1_type, role1_mult, role1_strat),
    role1_def.inversemult := role1_inverse_mult,
    Member2{role1} <- entity_scope,
    Member2{role1} =I=> role1_scope,
    Member{shortcut1} <- role1_scope,
    Member{shortcut1} : TTuple(role2_type, role1_inverse_mult, TIncremental()),
    Member{shortcut1}.ns := Shortcut(),
    Member{shortcut1}.reltype := this_type,
    Member{shortcut1}.originrole := role1,
    Member{shortcut1}.originrole2 := role2,
    Member{shortcut1}.calculationstrategy := TIncremental(),
    new role1_scope,
    Member{role2} -> entity_scope,
    Member{role2} |-> role2_def,
    role2_def : TTuple(role2_type, role2_mult, role2_strat), 
    role2_def.inversemult := role2_inverse_mult,
    Member2{role2} <- entity_scope,
    Member2{role2} =I=> role2_scope,
    Member{shortcut2} <- role2_scope,
    Member{shortcut2} : TTuple(role1_type, role2_inverse_mult, TIncremental()),
    Member{shortcut2}.ns := Shortcut(),
    Member{shortcut2}.reltype := this_type,
    Member{shortcut2}.originrole := role2,
    Member{shortcut2}.originrole2 := role1,
    Member{shortcut2}.calculationstrategy := TIncremental(),
    new role2_scope,
    Implicit{"this"} -> entity_scope,
    Implicit{"this"} |-> this_def,
    this_def : TTuple(this_type, this_mult, this_strat),
    true.
   