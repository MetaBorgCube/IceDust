module lib/index

imports

  lib/eq
  lib/lists-tuples
  lib/immutablemap

rules // @type Map(String, Map(String, List(Term)))

  index-get = ?name;_index-get;index-data-get(|name)

  index-get(|prop) = ?name;_index-get;index-data-get(|name, prop)
  
  index-get2(|prop) = index-get(|prop) <+ ![] //always succeed

  index-set(|name, prop) = ?val;_index-get;index-data-set(|name, prop, val);_index-set;!val
  index-add(|name, prop) = ?val;_index-get;index-data-add(|name, prop, val);_index-set;!val
  
  index-set = ?(name, prop, val);!val;index-set(|name, prop)
  index-add = ?(name, prop, val);!val;index-add(|name, prop)
  
  index-set-prop(|prop) = ?(name, val);!val;index-set(|name, prop)
  index-add-prop(|prop) = ?(name, val);!val;index-add(|name, prop)
  
  index-debug = _index-get;index-data-debug
  
rules // internal storage

  _index-set = ?index; rules(Index := index)
  _index-get = Index <+ immutablemap-create

rules // internal data structure
  
  index-data-get(|name): index -> prop*
    where
//      <debug>"index-data-get";
//      <debug>name;
//      <debug>index;
      prop* := <immutablemap-get(|name)>index
      
  index-data-get(|name, prop): index -> val*
    where
//      <debug>"index-data-get";
//      <debug>name;
//      <debug>prop;
//      <debug>index;
      prop* := <immutablemap-get(|name)>index;
      val*  := <immutablemap-get(|prop)>prop*

  index-data-set(|name, prop, val*): index -> index'
    with
//      <debug>"index-data-set";
//      <debug>name;
//      <debug>prop;
//      <debug>val*;
//      <debug>index;
      if prop* := <immutablemap-get(|name)>index then
        prop'* := <immutablemap-put(|prop,val*)>prop*;
        index' := <immutablemap-put(|name,prop'*)>index
      else
        prop* := <immutablemap-create>;
        prop'* := <immutablemap-put(|prop,val*)>prop*;
        index' := <immutablemap-put(|name,prop'*)>index
      end

  index-data-add(|name, prop, val): index -> index'
    with
//      <debug>"index-data-set";
//      <debug>name;
//      <debug>prop;
//      <debug>val;
//      <debug>index;
      if val* := <immutablemap-get(|name);immutablemap-get(|prop)>index then
        val'*  := [val*,val];
        prop*  := <immutablemap-get(|name)>index;
        prop'* := <immutablemap-put(|name,val'*)>prop*;
        index' := <immutablemap-put(|name,prop'*)>index
      else
        if prop* := <immutablemap-get(|name)>index then
          prop'* := <immutablemap-put(|prop,[val])>prop*;
          index' := <immutablemap-put(|name,prop'*)>index
        else
          prop* := <immutablemap-create>;
          prop'* := <immutablemap-put(|prop,[val])>prop*;
          index' := <immutablemap-put(|name,prop'*)>index
        end
      end
  
  index-data-debug = map(\ (name, props) -> <!props;map(\ (prop, vals) -> <!vals;map(\ val -> <debug>(name,prop,val) \)> \)> \) 
  
//rules // internal storage // old lists of tuples based implementation
//
//  _index-set = ?index; rules(Index := index)
//  _index-get = Index <+ ![]
//
//rules // internal data structure
//  
//  index-data-get(|name): index -> prop*
//    where
//      prop* := <lookup2(eq-origin)>(name, index)
//      
//  index-data-get(|name, prop): index -> val*
//    where
//      prop* := <lookup2(eq-origin)>(name, index);
//      val*  := <lookup>(prop, prop*)
//
//  index-data-set(|name, prop, vals): index -> index'
//    with
//      if index-data-get(|name, prop) then
//        index'   := <map(try(where(Fst;eq-origin(|name));split2(id,map(try(where(Fst;?prop);split2(id,!vals))))))>index
//      else
//        if index-data-get(|name) then
//          index' := <map(try(where(Fst;eq-origin(|name));split2(id,append(|(prop,vals)))))>index
//        else
//          index' := <append(|(name, [(prop,vals)]))>index
//        end
//      end
//
//  index-data-add(|name, prop, val): index -> index'
//    with
//      if index-data-get(|name, prop) then
//        index'   := <map(try(where(Fst;eq-origin(|name));split2(id,map(try(where(Fst;?prop);split2(id,append(|val)))))))>index
//      else
//        if index-data-get(|name) then
//          index' := <map(try(where(Fst;eq-origin(|name));split2(id,append(|(prop,[val])))))>index
//        else
//          index' := <append(|(name, [(prop,[val])]))>index
//        end
//      end
//  
//  index-data-debug = map(\ (name, props) -> <!props;map(\ (prop, vals) -> <!vals;map(\ val -> <debug>(name,prop,val) \)> \)> \) 
  