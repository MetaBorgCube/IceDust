module Common

lexical syntax // IDs

  ID = [a-zA-Z\_][0-9a-zA-Z\_]*
  ID = Keyword {reject}        
                
lexical restrictions
  
  ID -/- [a-zA-Z0-9\_]

lexical syntax // Keywords

  Keyword = "abstract"
  Keyword = "and"
  Keyword = "as"
  Keyword = "avg"
  Keyword = "Boolean"
  Keyword = "case"
  Keyword = "concat"
  Keyword = "conj"
  Keyword = "count"
  Keyword = "data"
  Keyword = "Datetime"
  Keyword = "default"
  Keyword = "disj"
  Keyword = "else"
  Keyword = "entity"
  Keyword = "execute"
  Keyword = "false"
  Keyword = "Float"
  Keyword = "if"
  Keyword = "inline"
  Keyword = "Int"
  Keyword = "max"
  Keyword = "match"
  Keyword = "min"
  Keyword = "model"
  Keyword = "module"
  Keyword = "no"
  Keyword = "not"
  Keyword = "or"
  Keyword = "orderBy"
  Keyword = "ordered"
  Keyword = "relation"
  Keyword = "String"
  Keyword = "sum"
  Keyword = "switch"
  Keyword = "this"
  Keyword = "true"
  Keyword = "unordered"

lexical restrictions

  Keyword -/- [a-zA-Z0-9\_]

lexical syntax // literals

  INT           = "-"? [0-9]+
  FLOAT         = "-"? [0-9]+ "." [0-9]+
  STRING        = StringChar* 
  StringChar    = ~[\"\n] 
  StringChar    = "\\\"" 
  StringChar    = BackSlashChar 
  BackSlashChar = "\\"
  DATETIME      = [0-9][0-9][0-9][0-9] "-" [0-9][0-9]? "-" [0-9][0-9]? LAYOUT [0-9][0-9]? ":" [0-9][0-9] ":" [0-9][0-9] 

lexical syntax // layout

  LAYOUT        = [\ \t\n\r] 
  CommentChar   = [\*] 
  LAYOUT        = "/*" ~[\*] | CommentChar* "*/" 
  LAYOUT        = "//" ~[\n\r]* [\n\r] | EOF 
  EOF           =  

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  FLOAT         -/- [0-9\.]
  DATETIME      -/- [0-9]

  EOF           -/- ~[]
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]

