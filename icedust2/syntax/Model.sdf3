module Model

imports

  Common
  Expressions
  Types
  
context-free syntax // entities

  Model.Entity = <
    entity <ID> <OptionalExtends?><Strategy?>{
      <{Member "\n"}*>
    }
  >
  
  Model.FirstClassRelation = <
    relation <ID> <OptionalExtends?><Strategy?>{
      <{Member "\n"}*>
    }
  >

//  Model.Trait = <
//    trait <ID> <OptionalExtends?><Strategy?>{
//      <{Member "\n"}*>
//    }
//  >
//  
//  OptionalExtends.OptionalExtends = [extends [{Extends ", "}+] ] // need a constructor to dispatch on in NaBL2
  
  OptionalExtends.OptionalExtends = [extends [Extends] ] // need a constructor to dispatch on in NaBL2
  
  Extends.Extends = <<ID>>
  
context-free syntax // shortcut relations

  Model.ShortcutRelation = [
    relation [ID][DotID?][SpaceMultiplicity?] <->[SpaceMultiplicity?] [ID][DotID?][Strategy?] {
      [{Member "\n"}*]
    }
  ]
  
context-free syntax // non-first-class relation

  Model.Relation = [
    relation [ID][DotID?][SpaceMultiplicity?] <->[SpaceMultiplicity?] [ID][DotID?]
  ]

  Model.RelationDerived = [
    relation [ID][DotID?][SpaceMultiplicity?] = [Exp]
      <->[SpaceMultiplicity?] [ID][DotID?][Strategy?]
  ]
  

context-free syntax // entity members

  Member.Attribute           = <
    <ID> : <PrimitiveType><Multiplicity?>
  >
  Member.AbstractAttribute   = <
    <ID> : <PrimitiveType><Multiplicity?> (abstract)<Strategy?>
  >
  Member.DerivationAttribute = <
    <ID> : <PrimitiveType><Multiplicity?> = <Exp><Strategy?>
  >
  Member.DefaultAttribute    = <
    <ID> : <PrimitiveType><Multiplicity?> = <Exp> (default)<Strategy?>
  >
  Member.InlineAttribute    = <
    <ID> : <AnyType><MultiplicityOrdering?> = <Exp> (inline)
  >
  
  Member.Role = [
    [ID][DotID?][SpaceMultiplicity?][SpaceArrowID?]
  ]
  
  Member.Shortcut = [
    [ID][DotID?] <-> [ID][DotID?]
  ]
  
  DotID             = <.<ID>>
  SpaceArrowID      = [ -> [ID]]
  SpaceMultiplicity = [ [MultiplicityOrdering]]
