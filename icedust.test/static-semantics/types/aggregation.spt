module types-aggregation

language icedust

fixture [[
  module test
  model
  entity X{
    i : Int ?
    s : String ?
  }
  data
  x : X {
    i = 1
    s = "a"
  }
  execute
  3
  [[...]]
]]


test type of aggr min   [[min(4 ++ 3)]]         run get-type2 to Int()
test type of aggr max   [[max(4 ++ 3 ++ 8)]]    run get-type2 to Int()
test type of aggr avg   [[avg(1 ++ 3)]]         run get-type2 to Int()
test type of aggr sum   [[sum(1 ++ 3)]]         run get-type2 to Int()
test type of aggr concat[[concat("a" ++ "b")]]  run get-type2 to String()
//test type of aggr count [[count("a" ++ "b")]]   run get-type2 to Int()
test type of aggr disj  [[disj(true ++ false)]] run get-type2 to Boolean()
test type of aggr conj  [[conj(true ++ false)]] run get-type2 to Boolean()

test type of aggr min  Float  [[min(4.4 ++ 3.4)]] run get-type2 to Float()

test error on aggr min String  [[ min("b" ++ "c")]] 1 error
test error on aggr concat Int  [[ concat(2 ++ 3) ]] 1 error


test multiplicity of aggr min OneOrMore    [[min(4 ++ 3)]]         run get-multiplicity to One()
test multiplicity of aggr max  OneOrMore   [[max(4 ++ 3 ++ 8)]]    run get-multiplicity to One()
test multiplicity of aggr avg OneOrMore    [[avg(1.0 ++ 3.3)]]     run get-multiplicity to One()
test multiplicity of aggr sum OneOrMore    [[sum(1 ++ 3)]]         run get-multiplicity to One()
test multiplicity of aggr concat OneOrMore [[concat("a" ++ "b")]]  run get-multiplicity to One()
test multiplicity of aggr count OneOrMore  [[sum(1 ++ 3)]]         run get-multiplicity to One()
test multiplicity of aggr conj OneOrMore   [[conj(true ++ false)]] run get-multiplicity to One()

test multiplicity of aggr min ZeroOrMore    [[min(x.i ++ x.i)]]    run get-multiplicity to ZeroOrOne()
test multiplicity of aggr concat ZeroOrMore [[concat(x.s ++ x.s)]] run get-multiplicity to One()
//test multiplicity of aggr count ZeroOrMore  [[count(x.s ++ x.s)]]  run get-multiplicity to One()

test error on aggr max One [[ max(3) ]] 1 error // should be warning
test error on aggr concat ZeroOrOne [[ concat(x.s) ]] 1 error // should be warning

test ordering of aggr sum   [[sum(1 ++ 3)]] run get-multiplicity to One() //is ordered
