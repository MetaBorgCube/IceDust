module types-math

language icedust

fixture [[
  module test
  model
  entity X{
    i : Int ?
    s : String ?
  }
  data
  x : X {
    i=3
    s="a"
  }
  execute
  3
  [[...]]
]]

test type of plus  [[1 + 3]] run get-type2 to Int()
test type of minus [[3 - 2]] run get-type2 to Int()
test type of mult  [[8 * 8]] run get-type2 to Int()
test type of div   [[4 / 7]] run get-type2 to Float()
test type of floor div [[4 /. 7]] run get-type2 to Int()
test type of mod   [[8 % 3]] run get-type2 to Int()

test type of plus Float  [[1.1 + 3.1]] run get-type2 to Float()

test type of plus String [["a" + "b"]] run get-type2 to String()

test type of plus [[3 + no value]] run get-type2 to Int()
test type of plus [[no value + 3]] run get-type2 to Int()
test type of plus [[no value + 3.0]] run get-type2 to Float()
test type of plus [[no value + no value + 3]] run get-type2 to Int()


test error on Boolean plus Boolean [[ true + false ]] >= 1 error
test error on Int plus String  [[ 1 + "b" ]] >= 1 error
test error on Int minus String [[ 1 - "b" ]] >= 1 errors
test error on String mod String[[ "a" % "b" ]] >= 1 error
test error on String div Int  [[ "a" / 3 ]] >= 1 errors


test multiplicity of One plus One  [[1 + 3]] run get-multiplicity to One()
test multiplicity of One minus One [[3 - 2]] run get-multiplicity to One()
test multiplicity of One mult One  [[8 * 8]] run get-multiplicity to One()
test multiplicity of One div One   [[4 / 7]] run get-multiplicity to One()
test multiplicity of One mod One   [[8 % 3]] run get-multiplicity to One()
test multiplicity of One div One 2 [[4 / 0]] run get-multiplicity to ZeroOrOne()
test multiplicity of One mod One 2 [[8 % 0]] run get-multiplicity to ZeroOrOne()
test multiplicity of One div One 3 [[4.0 / 7.0]] run get-multiplicity to One()
test multiplicity of One mod One 3 [[8.0 % 3.0]] run get-multiplicity to One()
test multiplicity of One div One 4 [[4.0 / 0.0]] run get-multiplicity to ZeroOrOne()
test multiplicity of One mod One 4 [[8.0 % 0.0]] run get-multiplicity to ZeroOrOne()

test multiplicity of One plus ZeroOrOne         [[1 + x.i]]   run get-multiplicity to ZeroOrOne()
test multiplicity of One plus ZeroOrOne String  [["s" + x.s]] run get-multiplicity to ZeroOrOne()
test multiplicity of ZeroOrOne minus One        [[x.i - 5]]   run get-multiplicity to ZeroOrOne()
test multiplicity of ZeroOrOne mult ZeroOrOne   [[x.i * x.i]] run get-multiplicity to ZeroOrOne()

test error on One plus OneOrMore [[ 1 + [[(2 ++ 3)]] ]] 1 error at #1 // should be warning

test ordering of Ordered mult Ordered  [[8 * 8]] run get-multiplicity to One() // is ordered
