module types-functions

language icedust

fixture [[
module test

functions

  round1(f : Float) : Float = (f * 10.0 + 0.5) as Int as Float / 10.0

  foo(i1 : Int?, i2s : Int+) : Int 1 = 4
  
  barGetI4(bar : Bar) : Int = bar.i4
  
  barGetI4plus(bar : Bar, p : Int) : Int = bar.i4 + p

model
  
  entity Bar {
    i1 : Int = 4 (incremental)
    i2 : Int = 4 (on-demand incremental)
    i3 : Int = 4 (on-demand)
    i4 : Int = 4 (eventual)
    i5 : Int = 4 (on-demand eventual)
  }

data

  bar:Bar{}

execute

  [[...]]

]]

test function call type   [[round1(3.33)      ]] run get-type2 to Float()
test function call type 2 [[round1(3.33++5.55)]] run get-type2 to Float()

test function call mult exact     [[round1(3.33)                ]] run get-multiplicity to One()
test function call mult lift many [[round1(3.33++5.55)          ]] run get-multiplicity to OneOrMoreOrdered()
test function call mult lift zero [[round1(no value)            ]] run get-multiplicity to ZeroOrOne()
test function call mult lift both [[round1(no value++no value)  ]] run get-multiplicity to ZeroOrMoreOrdered()

test function call mult 2 exact         [[foo(3   , 4       )]] run get-multiplicity to One()
test function call mult 2 lift 1st arg  [[foo(3++5, 4       )]] run get-multiplicity to OneOrMoreOrdered()
test function call mult 2 lift 2nd arg  [[foo(3   , no value)]] run get-multiplicity to ZeroOrOne()
test function call mult 2 lift all args [[foo(3++5, no value)]] run get-multiplicity to ZeroOrMoreOrdered()

test function call strategy from args   [[foo(bar.i1, bar.i1)]] run get-strategy to Incremental()
test function call strategy from args 2 [[foo(bar.i1, bar.i2)]] run get-strategy to OnDemandIncremental()
test function call strategy from args 3 [[foo(bar.i2, bar.i1)]] run get-strategy to OnDemandIncremental()
test function call strategy from args 4 [[foo(bar.i3, bar.i4)]] run get-strategy to OnDemandEventual()

test function call strategy from def [[barGetI4(bar)]] run get-strategy to Eventual()

test function call strategy from def and arg [[barGetI4plus(bar, bar.i3)]] run get-strategy to OnDemandEventual()
