module types-multiplicity-op-choice

language icedust

fixture [[
  module test
  model
  entity X{
    i : Int ?
  }
  relation X.yOrdered * (ordered) <-> * X.yUnordered
  data
  x : X {
    i=3
  }
  execute
  3
  [[...]]
]]


test type of choice Int    [[4 <+ 3  ]] run get-type2 to Int()
test type of choice String [["a" <+ "b"]] run get-type2 to String()


test mul ZeroOrOne  choice ZeroOrOne  [[x.i        <+ x.i        ]] run get-multiplicity to ZeroOrOne()
test mul ZeroOrOne  choice One        [[x.i        <+ 3          ]] run get-multiplicity to One()
test mul ZeroOrOne  choice ZeroOrMore [[x.i        <+ (x.i++x.i) ]] run get-multiplicity to ZeroOrMoreOrdered()
test mul ZeroOrOne  choice OneOrMore  [[x.i        <+ (3++2)     ]] run get-multiplicity to OneOrMoreOrdered()
test mul One         choice ZeroOrOne [[4          <+ x.i        ]] run get-multiplicity to One()
test mul One        choice One        [[4          <+ 3          ]] run get-multiplicity to One()
test mul One        choice ZeroOrMore [[4          <+ (x.i++x.i) ]] run get-multiplicity to One()
test mul One        choice OneOrMore  [[4          <+ (3++2)     ]] run get-multiplicity to One()
test mul ZeroOrMore choice ZeroOrOne  [[(x.i++x.i) <+ x.i        ]] run get-multiplicity to ZeroOrMoreOrdered()
test mul ZeroOrMore  choice One       [[(x.i++x.i) <+ 3          ]] run get-multiplicity to OneOrMoreOrdered()
test mul ZeroOrMore  choice ZeroOrMore[[(x.i++x.i) <+ (x.i++x.i) ]] run get-multiplicity to ZeroOrMoreOrdered()
test mul ZeroOrMore  choice OneOrMore [[(x.i++x.i) <+ (3++2)     ]] run get-multiplicity to OneOrMoreOrdered()
test mul OneOrMore  choice ZeroOrOne  [[(3++2)     <+ x.i        ]] run get-multiplicity to OneOrMoreOrdered()
test mul OneOrMore  choice One        [[(3++2)     <+ 3          ]] run get-multiplicity to OneOrMoreOrdered()
test mul OneOrMore  choice ZeroOrMore [[(3++2)     <+ (x.i++x.i) ]] run get-multiplicity to OneOrMoreOrdered()
test mul OneOrMore  choice OneOrMore  [[(3++2)     <+ (3++2)     ]] run get-multiplicity to OneOrMoreOrdered()

test ord Ordered   choice Ordered     [[x.yOrdered   <+ x.yOrdered   ]] run get-multiplicity to ZeroOrMoreOrdered() // is ordered
test ord Ordered   choice Unordered   [[x.yOrdered   <+ x.yUnordered ]] run get-multiplicity to ZeroOrMore() // is unordered
test ord Unordered choice Unordered   [[x.yUnordered <+ x.yUnordered ]] run get-multiplicity to ZeroOrMore() // is unordered
test ord Unordered choice Ordered     [[x.yUnordered <+ x.yOrdered   ]] run get-multiplicity to ZeroOrMore() // is unordered
