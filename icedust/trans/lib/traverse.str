module lib/traverse

imports

  lib/origin
  nabl2/api

rules // apply strategy on a list left-to-right and carry over a history

  map-fold(map-strategy): ([], fold-base-value) -> ([], fold-base-value)

  map-fold(map-strategy): ([input-head|input-rest], fold-value) -> ([input-head'|input-rest'], fold-value'')
    with
      (input-head', fold-value') := <map-strategy>(input-head, fold-value);
      (input-rest', fold-value'') := <map-fold(map-strategy)>(input-rest, fold-value')
      
rules // apply strategy on a tree top-down and carry over a history

  // for lists
  topdown-fold(map-strategy): (x@[], fold-base-value) -> (x, fold-base-value)

  topdown-fold(map-strategy): ([input-head|input-rest], fold-value) -> ([input-head'|input-rest'], fold-value'')
    with
      (input-head', fold-value') := <topdown-fold(map-strategy)>(input-head, fold-value);
      (input-rest', fold-value'') := <topdown-fold(map-strategy)>(input-rest, fold-value')

  // for terms
  topdown-fold(map-strategy): (term, fold-value) -> (term''', fold-value'')
    where
      <not(is-string)>term;
      <explode-term>term
    with
      (term', fold-value') := <map-strategy>(term, fold-value);
      (cons, args) := <explode-term>term';
      (args', fold-value'') := <topdown-fold(map-strategy)>(args, fold-value');
      term'' := <mkterm>(cons, args');
      term''' := <custom-origin(|term)>term''

  // for not(list) not(term)
  topdown-fold(map-strategy): (term, fold-value) -> (term', fold-value')
    where
      <not(is-list)>term;
      <not(explode-term)+is-string>term
    with
      (term', fold-value') := <map-strategy>(term, fold-value)
      
  // for lists
  topdown-fold-keep-anno(map-strategy): (x@[], fold-base-value) -> (x, fold-base-value)

  topdown-fold-keep-anno(map-strategy): ([input-head|input-rest], fold-value) -> ([input-head'|input-rest'], fold-value'')
    with
      (input-head', fold-value') := <topdown-fold-keep-anno(map-strategy)>(input-head, fold-value);
      (input-rest', fold-value'') := <topdown-fold-keep-anno(map-strategy)>(input-rest, fold-value')

  // for terms
  topdown-fold-keep-anno(map-strategy): (term, fold-value) -> (term'''', fold-value'')
    where
      <not(is-string)>term;
      <explode-term>term
    with
      annotations := <get-annotations> term;
      (term', fold-value') := <map-strategy>(term, fold-value);
      (cons, args) := <explode-term>term';
      (args', fold-value'') := <topdown-fold-keep-anno(map-strategy)>(args, fold-value');
      term'' := <mkterm>(cons, args');
      term''' := <custom-origin(|term)>term'';
      term'''' := <set-annotations> (term''', annotations)

  // for not(list) not(term)
  topdown-fold-keep-anno(map-strategy): (term, fold-value) -> (term', fold-value')
    where
      <not(is-list)>term;
      <not(explode-term)+is-string>term
    with
      (term', fold-value') := <map-strategy>(term, fold-value)

rules // 

  // for lists
  topdown-parent-fold-keep-anno(map-strategy): (x@[], parent, fold-base-value) -> (x, fold-base-value)

  topdown-parent-fold-keep-anno(map-strategy): ([input-head|input-rest], parent, fold-value) -> ([input-head'|input-rest'], fold-value'')
    with
      (input-head', fold-value') := <topdown-parent-fold-keep-anno(map-strategy)>(input-head, parent, fold-value);
      (input-rest', fold-value'') := <topdown-parent-fold-keep-anno(map-strategy)>(input-rest, parent, fold-value')

  // for terms
  topdown-parent-fold-keep-anno(map-strategy): (term, parent, fold-value) -> (term''''', fold-value'')
    where
      <not(is-string)>term;
      <explode-term>term
    with
      annotations := <get-annotations> term;
      (term', fold-value') := <map-strategy>(term, parent, fold-value);
      (cons, args) := <explode-term>term';
      (args', fold-value'') := <topdown-parent-fold-keep-anno(map-strategy)>(args, term, fold-value');
      term'' := <mkterm>(cons, args');
      term''' := <custom-origin(|term)>term'';
      term'''' := <set-annotations> (term''', annotations);
      term''''' := <try(nabl2-copy-ast-index(|term))>term'''' //copy NaBL2 attachments

  // for not(list) not(term)
  topdown-parent-fold-keep-anno(map-strategy): (term, parent, fold-value) -> (term', fold-value')
    where
      <not(is-list)>term;
      <not(where(explode-term);not(is-string))>term
    with
      (term', fold-value') := <map-strategy>(term, parent, fold-value)

rules // apply strategy on a tree top-down and carry over a history, dont carry over history for some

  // for lists
  topdown-fold-cond(map-strategy,no-history): (x@[], fold-base-value) -> (x, fold-base-value)

  topdown-fold-cond(map-strategy,no-history): ([input-head|input-rest], fold-value) -> ([input-head'|input-rest'], fold-value'')
    with
      (input-head', fold-value') := <topdown-fold-cond(map-strategy,no-history)>(input-head, fold-value);
      (input-rest', fold-value'') := <topdown-fold-cond(map-strategy,no-history)>(input-rest, fold-value')

  // for terms
  topdown-fold-cond(map-strategy,no-history): (term, fold-value) -> (term''', fold-value''')
    where
      <explode-term>term
    with
      (term', fold-value') := <map-strategy>(term, fold-value);
      (cons, args) := <explode-term>term';
      (args', fold-value'') := <topdown-fold-cond(map-strategy,no-history)>(args, fold-value');
      term'' := <mkterm>(cons, args');
      term''' := <custom-origin(|term)>term'';
      if <no-history>term then
        fold-value''' := fold-value
      else
        fold-value''' := fold-value''
      end

  // for not(list) not(term)
  topdown-fold-cond(map-strategy,no-history): (term, fold-value) -> (term', fold-value')
    where
      <not(is-list)>term;
      <not(explode-term)>term
    with
      (term', fold-value') := <map-strategy>(term, fold-value)

rules // bottom up traversal including annotations
  
  bottomup-anno(s) = all(bottomup-anno(s)); try(?t{a};!t{<bottomup-anno(s)>a}); s

rules // a -> List(a)

  transitive-closure(trans) = not(trans);![]
  transitive-closure(trans) = ?a;![<trans>a|<trans;transitive-closure(trans)>a]
  
  reflexive-transitive-closure(trans) = ?a;![a|<transitive-closure(trans)>a]

rules

  fmap(s) = flat-map(s)
  flat-map(s) = map(s);flatten-list
  