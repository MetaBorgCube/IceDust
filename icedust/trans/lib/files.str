module lib/files

imports

  api/_generated

rules // builders
  
  cleanup-generated-files : (selected, position, ast, path, project-path) -> None()
    with
      <guarantee-extension(|"java");delete-file> path;
      <guarantee-extension(|"aterm");delete-file> path;
      <guarantee-extension(|"analyzed.aterm");delete-file> path;
      <guarantee-extension(|"desugared.aterm");delete-file> path;
      <guarantee-extension(|"desugared.after.aterm");delete-file> path;
      <guarantee-extension(|"partition.analysis");delete-file> path;
      <guarantee-extension(|"partition.task");delete-file> path;
      <guarantee-extension(|"partition.index");delete-file> path;
      <guarantee-extension(|"properties.txt");delete-file> path;
      <guarantee-extension(|"selection.task");delete-file> path;
      <guarantee-extension(|"project.aterm");delete-file> path;
      <guarantee-extension(|"app");delete-file> path;
      <delete-file>$[[<dirname>path]/project.analysis];
      <delete-file>$[[<dirname>path]/project.index];
      <delete-file>$[[<dirname>path]/project.task];
      <delete-file>$[[<dirname>path]/index.project.aterm];
      <delete-file>$[[<dirname>path]/temp_test.db];
      <delete-dir>$[[<dirname>path]/lib];
      <delete-files>(<dirname>$[[project-path]/[path]],"class");
      <dirname;_refresh-workspace-file>$[[project-path]/[path]]

rules

  write-file: (fileName, content) -> (fileName, content)
    where
      <dirname;ensure-dir> fileName
    where
      fileDescriptor := <fopen> (fileName, "w");
      <fputs> (content, fileDescriptor);
      <fclose> fileDescriptor;
      <_refresh-workspace-file> fileName
      
  write-file: (fileName, content) -> (fileName, content)
    where
      <not(fopen)> (fileName, "w")
    with
      <debug> $[write-file failed, could not open file: [fileName]];
      fail

rules

  ensure-dir: path -> path
    where
      <file-exists;filemode;isdir> path
  ensure-dir: path -> path
    where
      <not(file-exists;filemode;isdir)> path;
      <dirname;ensure-dir> path;
      <mkdir> path

rules

  delete-file: a -> None()
    with
      if file-exists then remove-file end
  
  delete-files: (path, extension) -> None()
    with
      <readdir;filter(has-extension(|"class"));map(\a->$[[path]/[a]]\;delete-file)>path

rules
  
  delete-dir: target -> None()
    where
      isdir
    with
      <readdir;map(delete-dir(|target))> target;
      <rmdir> target

  delete-dir: target -> None()
    where
      file-exists
    with
      delete-file
  
  delete-dir: target -> None()
    where
      not(file-exists)
  
  delete-dir(|target) : file -> None()
    with
      <delete-dir> $[[target]/[file]]

rules
      
  copy-dir: (source, target) -> None()
    where
      <isdir> source
    with
      <ensure-dir> target;
      <readdir;map(copy-dir(|source, target))> source
      
  copy-dir: (source, target) -> None()
    where
      <file-exists> source
    with
      <copy-file> (source, target)
      
  copy-dir: (source, target) -> None()
    where
      <not(isdir <+ file-exists)> source
    with
      <debug> $[copy-dir failed, source is not a file or folder. source: [source]];
      fail

  copy-dir(|source, target): file -> None()
    with
      <copy-dir>($[[source]/[file]], $[[target]/[file]])

rules

  component-path = with(prim("language_components");filter(language-component-artifactId(|"icedust"));Hd;?(_,_,_,path));!path
  
  language-component-artifactId(|is-artifactId): (groupId, artifactId, version, location) -> <id>
    where
      <eq>(artifactId, is-artifactId)

rules

  eclipse-path: file-path -> result
    with
      project-path := <_project-path>;
      project      := <base-filename>project-path;
      result       := $[eclipse:///[project]/[file-path]]

rules

  local-path = prim("local_path")
      
