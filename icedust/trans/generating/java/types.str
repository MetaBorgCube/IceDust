module generating/java/types

imports // constructors

  signatures/Types-sig
  signatures/Expressions-sig

imports // functions

  api/_runtime
//  names/naming/names
//  naming/_notNaBL

rules // primitives
  
  type-to-java-type(err): String()   -> type |[ String ]|
  type-to-java-type(err): Int()      -> type |[ Integer ]|
  type-to-java-type(err): Boolean()  -> type |[ Boolean ]|
  type-to-java-type(err): Float()    -> type |[ Float ]|
  type-to-java-type(err): Datetime() -> type |[ Date ]|
  type-to-java-type(err): NoValue()  -> type |[ NullType ]|
  type-to-java-type(err): name       -> name
    where is-string

rules // types of expressions and names (uses type and multiplicity)
  
  expr-to-java-type(err) = name-to-java-type(err)
  
  name-to-java-type(err): name -> result
    with
      x_type := <(name-get-type<+get-type2);type-to-string-java>name
    with
      if <(name-get-multiplicity<+get-multiplicity);upper-one>name then
      result := type |[
        x_type
      ]|
    else
      result := type |[
        Collection<x_type>
      ]|
    end

rules // primitives as strings
  
  type-to-string-java: String()   -> "String"
  type-to-string-java: Int()      -> "Integer"
  type-to-string-java: Boolean()  -> "Boolean"
  type-to-string-java: Float()    -> "Float"
  type-to-string-java: Datetime() -> "Date"
  type-to-string-java: NoValue()  -> "NullType"
  type-to-string-java: name       -> name
    where is-string
