module generating/java/data

imports // constructors

  java/Java

imports // functions

  api/data-names-api
  api/model-names-api
  api/module-names-api
  generating/_ir/model
  generating/java/expressions
//  names/naming/names
//  naming/_notNaBL

rules
 
  data-modulename-to-java-stms(err): moduleName -> result
    with
      eiNames            := <modulename-get-entityinstancenames>moduleName;
      result-newObjects* := < map(entityinstancename-to-java-stm(err))>eiNames;
      result-membervals* := <fmap(entityinstancename-to-java-stms2(err))>eiNames
    with
      result := bstm* |[
        ~result-newObjects*
        ~result-membervals*
      ]|

rules

  entityinstancename-to-java-stm(err): x_eiName -> result
    with
      x_type := <entityinstancename-get-type>x_eiName
    with
      result := bstm |[
        x_type x_eiName = new x_type();
      ]|

  entityinstancename-to-java-stms2(err): x_eiName -> result
    with
      result-attributes* := <entityinstancename-get-attributevaluenames;fmap(attributevaluename-to-java-stms(err))>x_eiName;
      result-rri*        := <entityinstancename-get-rri-left           ;fmap(relationvaluename-to-java-stms (err))>x_eiName
    with
      result := bstm* |[
        ~result-attributes*
        ~result-rri*
      ]|

rules
  
  attributevaluename-to-java-stms(err): x_attributevalueName -> result
    where
      membervaluename-is-attribute
    with
      x_eiName := <membervaluename-get-entityinstancename>x_attributevalueName;
      x_setter := <name-set>x_attributevalueName;
      valueAst := <membervaluename-get-expr>x_attributevalueName;
      (_, attributeValueJava) := <exp-to-java-stm(err|0)>valueAst
    with
      result := bstm* |[
        x_eiName.x_setter(~attributeValueJava);
      ]|
      
  relationvaluename-to-java-stms(err): x_relationvalueName -> result
    where
      membervaluename-is-relation <+ membervaluename-is-role <+ membervaluename-is-inverse
    with
      x_eiName   := <membervaluename-get-entityinstancename>x_relationvalueName;
      valueNames := <membervaluename-get-values>x_relationvalueName;
      result     := <map(relationvaluenameitem-to-java-stm(err|x_eiName, x_relationvalueName))>valueNames

rules

  relationvaluenameitem-to-java-stm(err|x_eiName, relationName): x_eiName2 -> result
    with
      x_set := <name-set>relationName;
      x_add := <name-add>relationName;
      if <membervaluename-get-origin;name-get-multiplicity;upper-one>relationName then
        result := java:block-stm |[
          x_eiName.x_set(x_eiName2);
        ]|
      else
        result := java:block-stm |[
          x_eiName.x_add(x_eiName2);
        ]|
      end
