module generating/js/getter

imports
  signatures/Types-sig
  
  api/types-api
  api/model-names-api
  
  generating/js/names
  generating/js/common

rules
  
  
  getter-function-multiplicities = ![One(), ZeroOrMore()]
  
  getter-functions = ?attribute ; getter-function-multiplicities ; mapconcat(!(attribute, <id>) ; getter-function)
  
  getter-function: (attribute, m) -> js-stmt* |[
    function x_functionName(state, x_var){
      stmt_body*
      return result;
    }
    module.exports.x_functionName = x_functionName;
  ]|
    with
      x_functionName := <getter-function-name> (attribute, m)
    ; x_var := <id-var> m
    ; x_result := "result"
    ; x_value := "value"
    ; m_attribute := <name-get-multiplicity> attribute
    ; stmt_body* := <getter-body> (m, m_attribute, attribute, x_var, x_result, x_value)
  
  getter-body: (m1, m2, attribute, x_name, x_result, x_value) -> stmt_body* 
    with
      exp_table := <attribute-table-expression> attribute
    with
      switch !(m1, m2)
        case (?One() <+ ?ZeroOrOne(), id):
          exp_empty := <exp-attribute-empty> attribute
        ; stmt_attribute* := <reference-attribute-in-object> (attribute, x_result, x_result)  
        ; stmt_body* := js-stmt* |[
            var x_result = state.get(exp_table).get(x_name);
            if(x_result === undefined){
              x_result = exp_empty;
            } 
            stmt_attribute*
          ]|
        case ?(ZeroOrMore(), m2):
          stmt_push* := <getter-push-statements> (attribute, m2, x_result, x_value)
        ; stmt_body* := js-stmt* |[
            var x_result = [];
            var table = state.get(exp_table);
            for(var i = 0 ; i < x_name.length ; i++){
              var x_value = table.get(x_name[i]);
              stmt_push*
            }
          ]|
      end
      
  reference-attribute-in-object : (x_attribute, x_result, x_value) -> js-stmt* |[
    if(x_value != null){
      x_result = x_value.x_attribute;
      if(x_result === undefined){
        x_result = exp_empty;
      }
    }
  ]|
    where
      <is-attributename ; attributename-is-normal-default> x_attribute
    with
      exp_empty := <name-get-multiplicity ; exp-empty> x_attribute
  
  reference-attribute-in-object = ![]
        
  getter-push-statements: (attribute, m, x_result, x_value) -> stmt_push*
    with
      stmts_attribute := <reference-attribute-in-object> (attribute, x_value, x_value)
    with
      switch !m
        case One():
          stmt_push* := js-stmt* |[
            stmts_attribute
            x_result.push(x_value);
          ]|
        case ZeroOrOne():
          stmt_push* := js-stmt* |[
            stmts_attribute
            if(value !== null){
              x_result.push(x_value);
            }
          ]|
        case upper-many():
          stmt_push* := js-stmt* |[
            var value2 = x_value;
            if(value2 != null){
              for(var j = 0 ; j < value2.length ; j++){
                var x_value = value2[j];
                stmts_attribute
                x_result.push(x_value);
              }
            }
          ]|
      end
  
  