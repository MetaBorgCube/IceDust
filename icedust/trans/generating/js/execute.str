module generating/js/execute

imports

  api/module-names-api
  
  generating/js/expression
  generating/js/names

rules

  generate-execute: x_moduleName -> js-stmt* |[
    function execute(state, x_ids){
      var x_result = [];
      var oldScope = scope;
      (function(){
        var scope = _.assign({}, oldScope, x_ids);
        stmts_expressions
      })();
      return {
        state: state,
        x_result: x_result
      };
    }
    module.exports.execute = execute;
  ]|
    with
      x_result := "result"
    ; x_ids := "ids"
    ; x_scope := <scope-var>
    ; expressions := <modulename-get-exprs> x_moduleName
    ; stmts_expressions := <map(generate-execute-expression-stmt(|x_result))> expressions

  generate-execute-expression-stmt(|x_result): e -> js-stmt |[
    (function(){
      stmts_e
      x_result = x_result.concat([exp_e]);
    })();
  ]|
    with
       i := 0
     ; (exp_e, stmts_e, _) := <execute-expression-serialize(|i) <+ exp-to-js-stmts(|i)> e 
  
  // hook for custom serialization of execute expressions
  // exp -> (exp_result, stmts_result, i')
  execute-expression-serialize(|i) = fail
  
  execute-expression-serialize(|i): e -> result
    where 
      Datetime () := <get-type2> e
    with
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; exp_result := js-exp|[exp_e.format()]|
    ; result := (exp_result, stmts_e, i')
  
  