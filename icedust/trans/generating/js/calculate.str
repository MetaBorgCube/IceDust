module generating/js/calculate

imports
  js/js-util
  
  api/model-names-api
  
  lib/option

  generating/js/names
  generating/js/access
  generating/js/expression
  generating/js/setter

rules

  generate-calculate-functions: attribute -> <concat> [
      stmts_single
    , stmts_many
  ]
    where
      stmts_single := <generate-calculate-function> attribute
    with
      stmts_many := <generate-calculate-many-function> attribute


  attribute-has-calculate = name-has-expr

  generate-calculate-many-function: attribute -> js-stmt* |[
    function x_calculateManyFunctionName(state, x_id){
      var result = [];
      for(var i = 0 ; i < x_id.length ; i++){
        var id = x_id[i];
        var calc = x_calculateFunctionName(state, id);
        state = calc.state;
        if(calc.result !== null){
          stmts_push
        }
      }
      return {
        state: state,
        result: result
      };
    }
    module.exports.x_calculateManyFunctionName = x_calculateManyFunctionName;
  ]|
    with
      m := ZeroOrMore()
    ; m_attribute := <name-get-multiplicity> attribute
    ; x_calculateFunctionName := <calculate-function-name> attribute
    ; x_calculateManyFunctionName := <calculate-function-name> (attribute, m)
    ; x_id := <id-var> m
    ; stmts_push := <calculate-push-statements> m_attribute
  
  calculate-push-statements: _ -> js-stmt* |[
    result.push(calc.result);
  ]|
    where upper-one
    
  calculate-push-statements: _ -> js-stmt* |[
    result = result.concat(calc.result);
  ]|
    where upper-many
  
      
  generate-calculate-function: x_attribute -> js-stmt*|[
    function x_calculateFunctionName(state, x_id){
      var x_result = x_getterFunctionName(state, exp_id);
      if(x_result === exp_uncalculatedValue){
        var x_first = exp_id;
        stmts_calculate
        x_result = exp_result;
        stmts_setter
      }
      return {
        state: state,
        x_result: x_result
      };
    }
    module.exports.x_calculateFunctionName = x_calculateFunctionName;
  ]|
    where
      exp_attribute := <attributename-get-expr> x_attribute
    with
      m := One()
    ; x_id := <id-var> m
    ; exp_id := <js-var> x_id
    ; x_result := "result"
    ; x_getterFunctionName := <getter-function-name> (x_attribute, m)
    ; exp_uncalculatedValue := <exp-uncalculated-value> x_attribute
    ; x_calculateFunctionName := <calculate-function-name> x_attribute
    ; x_first := <int-to-varname> 0
    ; (exp_result, stmts_calculate, _) := <exp-to-js-stmts(|1)> exp_attribute
    ; x_setterFunction := <setter-function-name> x_attribute
    ; stmts_setter := <setter-statements(![]|exp_id, exp_result)> x_attribute
      
  exp-uncalculated-value = name-is-default ; js-null
  exp-uncalculated-value = js-undefined
  
  exp-update-table: (x_attribute, x_result) -> js-exp |[
    function(table){ 
      return table.update(id, function(e) { 
        return _.assign({}, e, {x_attribute: x_result});
      });
    }
  ]|
    where
      <name-is-default> x_attribute
      
  exp-update-table: (x_attribute, x_result) -> js-exp |[
    function(table) {
      return table.set(id, x_result); 
    }
  ]|
  
  
  derived-relation-inverse-update-statements: x_attributename -> stmts_updateInverse
    where
      <relationname-is-left> x_attributename
    with
      m_attribute := <name-get-multiplicity> x_attributename
    ; x_inverse := <relationname-get-inversename> x_attributename
    ; m_inverse := <name-get-multiplicity ; simplify-multiplicity> x_inverse
    ; exp_table := <attribute-table-expression> x_inverse
    with
      switch !m_attribute
        case upper-one:
          stmts_updateInverse := js-stmt* |[
            if(result != null){
              state = state.update(exp_table, function(table){
                return table.set(result, id);
              });
            }
          ]|
        case upper-many:
          stmts_updateInverse := js-stmt* |[
            state = state.update(exp_table, function(table){
              for(var i = 0 ; i < result.length ; i++) {
                table = table.set(result[i], id);
              }
              return table;  
            });
          ]|
      end
  
  derived-relation-inverse-update-statements: x_attributename -> []
  