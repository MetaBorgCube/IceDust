module generating/webdsl/module

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
//  desugaring/constructors
  signatures/Types-sig
  analysis2/path
  tiersplit/constructors

imports // functions
  
  generating/_ir/model 
  generating/webdsl/module-derivations
  generating/webdsl/module-manage
  generating/webdsl/module-ui
  generating/webdsl/model
  generating/webdsl/data
  generating/webdsl/functions
  generating/webdsl/types
  api/model-names-api
  api/module-api
  api/module-names-api
  lib/lists-tuples
  lib/string

rules // module

  modulename-to-webdsl-application(err): x_moduleName -> result
    where
      <is-modulename> x_moduleName
    with
      def_model*     := <modulename-get-entitynames; map(model-entityname-to-webdsl-def(err))>x_moduleName;
      stat_initdata* := <data-modulename-to-webdsl-stms(err)>x_moduleName
    with
      if modulename-is-explorerui then
        def_crud*      := <modulename-get-entitynames;fmap(entityname-to-webdsl-defs)>x_moduleName;
        elem_menu*     := <modulename-get-entitynames; map(entityname-to-webdsl-elem)>x_moduleName
      end
    with
      def_dirtyReqVar* := <modulename-get-arrinames-default-derived-incremental-eventual;map(attributename-to-webdsl-def)>x_moduleName;
      stat_cach*       := <cache-modulename-to-webdsl-stms>x_moduleName
    with
      stat_flagasync*    := <modulename-get-arrinames-default-derived-eventual; map(attributename-to-webdsl-stat)>x_moduleName;
      native1*           := <modulename-get-arrinames-default-derived-eventual;fmap(attributename-to-webdsl-natives)>x_moduleName;
      stat_cachAsync*    := <cache-async-modulename-to-webdsl-stms>x_moduleName
    with
      elem_manageRows*    := <modulename-get-arrinames-topo-default-derivation;flatten-list; map(membername-to-webdsl-elem-row   )>x_moduleName;
      def_manage*         := <modulename-get-arrinames-topo-default-derivation;flatten-list;fmap(membername-to-webdsl-defs-manage)>x_moduleName
    with
      stat_countDirtyUT* := <modulename-get-arrinames-topo-default-derivation-eventual;flatten-list;map(countdirtyuptill-attributename-to-webdsl-stm)>x_moduleName;
      stat_countDirty*   := <modulename-get-arrinames-topo-default-derivation-eventual;flatten-list;map(countdirty-attributename-to-webdsl-stm      )>x_moduleName
    with
      def_func*          := <modulename-get-functionnames;fmap(functionname-to-webdsl-defs(err))>x_moduleName
    with
      sec_modelData* := section* |[
        section data
          
          init {
            stat_initdata*
          }
        
        section model
        
          def_model*
          
        section functions
        
          def_func*
      ]|
    with
      if modulename-is-explorerui then
        sec_ui* := section* |[
          section ui
          
            define applicationmenu() {
              elem_menu*
            }
            
            def_crud*
        ]|
      end
    with
      sec_cachesDirtyflag* := section* |[
        section caches and dirty flags
        
          def_dirtyReqVar*
          
          function updateDerivations(){
            stat_cach*
          }
      ]|
    with
      sec_asyncDirtyflag* :=  section* |[
        section async dirty flags
          
          function flagDirtyAsync(){
            stat_flagasync*
          }
          
          function updateDerivationsAsync(thisThread : Thread){
            if(Settings.getUpdatesEnabled()){
              stat_cachAsync*
              DirtyCollections.cleanI(2147483647);
            }
          }
          
          native class derivations.DirtyCollections as DirtyCollections {
            static getI() : Int
            static dirtyI(Int)
            static cleanI(Int)
            static getJ() : Int
            static setJ(Int)
            static incrementCollision()
            static getCountCollisions() : Int
            static incrementCalculation()
            static getCountCalculations() : Int
          
            native1*
          }
          
          function countDirtyUpTill(ii : Int) : Int{
            var n := 0;
            stat_countDirtyUT*
            return n;
          }
          
          function countDirty(ii : Int) : Int{
            var n := 0;
            stat_countDirty*
            return n;
          }
          
          function logCountDirty(){
            var ii       := DirtyCollections.getI();
            var jj       := DirtyCollections.getJ();
            var countAll := countDirtyUpTill(2147483647);
            var countI   := countDirty(ii);
            var collissions  := DirtyCollections.getCountCollisions();
            var calculations := DirtyCollections.getCountCalculations();
            if(countAll>0 && Settings.getLogeventualstatus()){
              log(
                "Eventual Calculation at ordering: " + ii + " : " + jj + ", queue size: " + countI + ", total queue size: " + countAll +
                ", calculations: " + calculations + ", collissions: " + collissions
              );
            }
          }
          
          invoke logCountDirty() every 1000 milliseconds
      ]|
    with
      sec_hibernateTriggers* :=  section* |[
        section triggers
      
          function beforeTransactionCompletion(){
            updateDerivations();
            flush();
          }
          
          function afterTransactionCompletionCommitted(){
            flagDirtyAsync();
          }
      ]|
    with
      sec_manage* :=  section* |[
        section manage
        
          template changeEventualThreads(){
            var xx : Int := Settings.getNumWorkers()
            form{
              input(xx)
              toggleVisibility("Update number of eventual calculation threads"){
                submit action{
                  Settings.setNumWorkers(xx);
                }{
                  "yes, Update number of eventual calculation threads"
                }
              }
            }
          }
          
          template changeCalcBatchSize(){
            var xx : Int := Settings.getCalcBatchSize()
            form{
              input(xx)
              toggleVisibility("Update batch size (calculations per transaction)"){
                submit action{
                  Settings.setCalcBatchSize(xx);
                }{
                  "yes, Update batch size (calculations per transaction)"
                }
              }
            }
          }
        
          page derivedvalues(showCount:Bool) {
            title{ "Manage Derived Values" }
            h1{ "Manage Derived Values" }
            if(Settings.getUpdatesEnabled()){
              toggleVisibility("pause all derived value calculation"){
                submit action{
                  Settings.setUpdatesEnabled(!Settings.getUpdatesEnabled());
                }{
                  "yes, pause all derived value calculation"
                }
              }
            }
            else{
              toggleVisibility("enable all derived value calculation"){
                submit action{
                  Settings.setUpdatesEnabled(!Settings.getUpdatesEnabled());
                }{
                  "yes, enable all derived value calculation"
                }
              }
            }
            br
            if(Settings.getDirtyFlaggingEnabled()){
              toggleVisibility("disable dirty flagging"){
                submit action{
                  Settings.setDirtyFlaggingEnabled(!Settings.getDirtyFlaggingEnabled());
                }{
                  "yes, disable dirty flagging (note: this will make derived values inconsistent until manual recalculation!)"
                }
              }
            }
            else{
              toggleVisibility("enable dirty flagging"){
                submit action{
                  Settings.setDirtyFlaggingEnabled(!Settings.getDirtyFlaggingEnabled());
                }{
                  "yes, enable dirty flagging"
                }
              }
            }
            br
            if(Settings.getLogincremental()){
              toggleVisibility("disable log incremental"){
                submit action{
                  Settings.setLogincremental(!Settings.getLogincremental());
                }{
                  "yes, disable log incremental"
                }
              }
            }
            else{
              toggleVisibility("enable log incremental"){
                submit action{
                  Settings.setLogincremental(!Settings.getLogincremental());
                }{
                  "yes, enable log incremental"
                }
              }
            }
            br
            if(Settings.getLogeventualupdate()){
              toggleVisibility("disable log every eventual update"){
                submit action{
                  Settings.setLogeventualupdate(!Settings.getLogeventualupdate());
                }{
                  "yes, disable log every eventual update"
                }
              }
            }
            else{
              toggleVisibility("enable log every eventual update"){
                submit action{
                  Settings.setLogeventualupdate(!Settings.getLogeventualupdate());
                }{
                  "yes, enable log every eventual update"
                }
              }
            }
            br
            if(Settings.getLogeventualstatus()){
              toggleVisibility("disable log eventual status every second"){
                submit action{
                  Settings.setLogeventualstatus(!Settings.getLogeventualstatus());
                }{
                  "yes, disable log eventual status every second"
                }
              }
            }
            else{
              toggleVisibility("enable log eventual status every second"){
                submit action{
                  Settings.setLogeventualstatus(!Settings.getLogeventualstatus());
                }{
                  "yes, enable log eventual status every second"
                }
              }
            }
            br
            changeEventualThreads{}
            changeCalcBatchSize{}
            table{
              row{
                column{ "Order" }
                column{ "Name" }
                column{ "Type" }
                column{
                  "Status "
                  if(showCount){
                    navigate derivedvalues(false){"hide"}
                  }else{
                    navigate derivedvalues(true){"show"}
                  }
                }
                column{ "Actions" }
              }
              row{
                column{  }
                column{  }
                column{  }
                column{  }
                column{
                  toggleVisibility("flag all incremental fields dirty"){
                    submit action{
                      flagAllIncrementalDirty();
                      log("Updating derivations");
                      updateDerivations();
                      log("Updating derivations done");
                    }{
                      "yes, flag all incremental fields dirty"
                    }
                  }
                  br
                  toggleVisibility("flag all on-demand incremental fields dirty"){
                    submit action{
                      flagAllOnDemandIncDirty();
                    }{
                      "yes, flag all on-demand incremental fields dirty"
                    }
                  }
                  br
                  toggleVisibility("flag all eventual fields dirty"){
                    submit action{
                      flagAllEventualDirty();
                      log("flagDirtyAsync");
                      flagDirtyAsync();
                      log("flagDirtyAsync done");
                    }{
                      "yes, flag all eventual fields dirty"
                    }
                  }
                }
              }
              elem_manageRows*
              row{
                column{ output(DirtyCollections.getI()) " : " output(DirtyCollections.getJ()) }
                column{  }
                column{  }
                column{ output(countDirtyUpTill(2147483647))  }
                column{  }
              }
            }
          }
          
          def_manage*
          
          function flagAllIncrementalDirty(){}
          
          function flagAllOnDemandIncDirty(){}
          
          function flagAllEventualDirty(){}
          
          native class derivations.Settings as Settings{
            static getUpdatesEnabled( ): Bool
            static setUpdatesEnabled( Bool ): Void
            static getDirtyFlaggingEnabled( ): Bool
            static setDirtyFlaggingEnabled( Bool ): Void
            static setNumWorkers( Int ): Void
            static getNumWorkers(): Int
            static setCalcBatchSize( Int ): Void
            static getCalcBatchSize(): Int
            static getLogincremental( ): Bool
            static setLogincremental( Bool ): Void
            static getLogeventualupdate( ): Bool
            static setLogeventualupdate( Bool ): Void
            static getLogeventualstatus( ): Bool
            static setLogeventualstatus( Bool ): Void
            static threadMapsSet(Thread, Set<String>, String)
          }
          
          native class java.lang.Thread as Thread{}
      ]|
    with
      if modulename-is-explorerui then
        result := application |[
          application x_moduleName
        
          imports lib/icedust/modelexplorer-ui
          imports lib/icedust/non-required-inputs
          imports lib/icedust/Expressions
      
          sec_modelData*
          
          sec_ui*
        
          sec_cachesDirtyflag*
        
          sec_asyncDirtyflag*
          
          sec_hibernateTriggers*
        
          sec_manage*
        ]|
      else //embedded model
        result := module |[
          module x_moduleName
        
          imports lib/icedust/Expressions
      
          sec_modelData*
        
          sec_cachesDirtyflag*
        
          sec_asyncDirtyflag*
          
          sec_hibernateTriggers*
        
          sec_manage*
          
            access control rules
            
              rule page derivedvalues(showCount:Bool) { true }
        ]|
      end
