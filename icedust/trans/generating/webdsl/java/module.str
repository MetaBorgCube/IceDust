module generating/webdsl-eventual/java/module

imports // constructors

//  api/constructors
  java/Java

imports // functions

  api/model-names-api
  api/module-api
  api/module-names-api
  generating/_ir/model
  generating/java/functions
  lib/traverse

rules // module (or modulename) -> java compilation-unit
  
  modulename-to-java-compilationunit2(err): x_moduleName -> result
    where
      is-modulename
    with
      decs* := <modulename-get-arrinames-default-derived-eventual;fmap(attributename-to-java-classbodydecs(err))>x_moduleName
    with
      if modulename-is-logincremental then
        logincrementalJava := class-body-dec |[
          static volatile boolean logincremental = true;
        ]|
      else
        logincrementalJava := class-body-dec |[
          static volatile boolean logincremental = false;
        ]|
      end
    with
      if modulename-is-logeventualupdate then
        logeventualupdateJava := class-body-dec |[
          static volatile boolean logeventualupdate = true;
        ]|
      else
        logeventualupdateJava := class-body-dec |[
          static volatile boolean logeventualupdate = false;
        ]|
      end
    with
      if modulename-is-logeventualstatus then
        logeventualstatusJava := class-body-dec |[
          static volatile boolean logeventualstatus = true;
        ]|
      else
        logeventualstatusJava := class-body-dec |[
          static volatile boolean logeventualstatus = false;
        ]|
      end
    with
      x_eventualthreads   := <modulename-get-eventualthreads>  x_moduleName;
      x_eventualinterval  := <modulename-get-eventualinterval> x_moduleName;
      x_eventualbatchsize := <modulename-get-eventualbatchsize>x_moduleName;
      initTimersJava := class-body-dec |[
        static Settings triggerByClassLoader = new Settings(x_eventualthreads, x_eventualinterval, x_eventualbatchsize);
      ]|
    with
      result := compilation-unit |[
        package derivations;
        
        import java.util.Set;
        import java.util.concurrent.ConcurrentHashMap;
        import java.util.Collection;
        import java.util.Collections;
        import java.util.Date;
        import java.util.Iterator;
        import lib.icedust.*;
        
        public class DirtyCollections {

          private static final Object syncObject = new Object();
          
          private static int ii = 0;
          
          public static void dirtyI(int newI){
            synchronized(syncObject){
              if(newI < ii){
                ii = newI;
              }
            }
          }
          
          public static void cleanI(int newI){
            synchronized(syncObject){
              if(newI > ii){
                ii = newI;
              }
            }
          }
          
          public static int getI(){
            synchronized(syncObject){
              return ii;
            }
          }
          
          private static final Object syncObject2 = new Object();
        
          private static int jj = 0;
        
          public static void setJ(int newJ)
          { 
            synchronized(syncObject2)
            { 
              jj = newJ;
            }
          }
        
          public static int getJ()
          { 
            synchronized(syncObject2)
            { 
              return jj;
            }
          }
  
          private static final Object syncCountCollisions = new Object();
          
          private static int countCollisions = 0;
          
          public static void incrementCollision() {
            synchronized(syncCountCollisions){
                countCollisions += 1;
            }
          }
          
          public static int getCountCollisions() {
            synchronized(syncCountCollisions){
              int r = countCollisions;
                countCollisions = 0;
                return r;
            }
          }

          private static final Object syncNotFound = new Object();
          
          private static int countNotFound = 0;
        
          public static void incrementNotFound()
          { 
            synchronized(syncNotFound)
            { 
              countNotFound += 1;
            }
          }
        
          public static int getCountNotFound()
          { 
            synchronized(syncNotFound)
            { 
              int r = countNotFound;
              countNotFound = 0;
              return r;
            }
          }
          
          private static final Object syncCountCalculations = new Object();
          
          private static int countCalculations = 0;
          
          public static void incrementCalculation() {
            synchronized(syncCountCalculations){
                countCalculations += 1;
            }
          }
          
          public static int getCountCalculations() {
            synchronized(syncCountCalculations){
              int r = countCalculations;
                countCalculations = 0;
                return r;
            }
          }
          
          ~logincrementalJava
          ~logeventualupdateJava
          ~logeventualstatusJava
          ~initTimersJava
          
          ~decs*
          
        }
      ]|

rules // attrname -> java declarations
  
  attributename-to-java-classbodydecs(err): x_attributeName -> result
    with
      x_attributeQueue    := <attributename-entityname-queue>x_attributeName;
      x_attributeGetQueue := <attributename-entityname-getqueue>x_attributeName;
      x_attributePoll     := <attributename-entityname-poll>x_attributeName
    with
      result := class-body-dec* |[
        private static Set<String> x_attributeQueue = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
      
        public static Set<String> x_attributeGetQueue()
        { 
          return x_attributeQueue;
        }
        
        public static String x_attributePoll(){
          synchronized(x_attributeGetQueue()){
            Iterator<String> it = x_attributeGetQueue().iterator();
            if(it.hasNext()){
              String elem = it.next();
              x_attributeGetQueue().remove(elem);
              return elem;
            }
          }
          return null;
        }
      ]|
