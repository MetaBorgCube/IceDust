module generating/webdsl/types

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
  signatures/Expressions-sig
  signatures/Types-sig
//  desugaring/constructors

imports // functions

  api/_runtime
  api/model-names-api
  api/types-api
  api/types-names-api
//  names/naming/names
//  naming/_notNaBL
  
rules // primitives
  
  type-to-webdsl-srt(err): Boolean() -> webdsl |[ Bool ]|      //webdsl srt
  type-to-webdsl-srt(err): Int()     -> webdsl |[ Int ]|      //webdsl srt  
  type-to-webdsl-srt(err): String()  -> webdsl |[ String ]|    //webdsl srt
  type-to-webdsl-srt(err): Float()   -> webdsl |[ Float ]|    //webdsl srt
  type-to-webdsl-srt(err): Datetime()-> webdsl |[ DateTime ]| //webdsl srt
  type-to-webdsl-srt(err): NoValue() -> webdsl |[ Void ]|
  type-to-webdsl-srt(err): name      -> name
    where is-string

rules // types of expressions and names (uses type and multiplicity)
  
  expr-to-webdsl-srt(err) = name-to-webdsl-srt(err)
  
  name-to-webdsl-srt(err): name -> result
    with
      srt1 := <(name-get-type<+get-type2);type-to-webdsl-srt(err)>name
    with
      switch id
        case (name-get-multiplicity<+get-multiplicity);upper-one:
          result := webdsl |[ //webdsl srt
            srt1
          ]|
        case (name-get-multiplicity<+get-multiplicity);upper-many:
//        case (name-get-multiplicity<+get-multiplicity);upper-many-ordered:
          result := webdsl |[ //webdsl srt
            [srt1]
          ]|
//        case (name-get-multiplicity<+get-multiplicity);upper-many-unordered:
//          result := webdsl |[ //webdsl srt
//            {srt1}
//          ]|
      end

rules // pritives as strings (not literal string in target language)

  type-to-string-webdsl: String()   -> "String"
  type-to-string-webdsl: Int()      -> "Integer"
  type-to-string-webdsl: Boolean()  -> "Boolean"
  type-to-string-webdsl: Float()    -> "Float"
  type-to-string-webdsl: Datetime() -> "DateTime"
  type-to-string-webdsl: name       -> name
    where is-string
