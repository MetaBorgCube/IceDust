module editor/generate

imports // constructors

  api/_runtime-constructors
  generating/_ir/constructors
  
imports // functions

  editor/analysis
  analysis2/analysis2
  api/_generated
  api/_runtime
  api/module-api
  api/module-names-api
  desugaring/desugar
  generating/_ir/paths
  generating/java/generate
  generating/webdsl/generate
  generating/webdsl/java/generate
  generating/webdsl/js/generate
  lib/files
  lib/call-external
  lib/index
  prettyprinting/pp

rules // Builders
  
  generate-java                      = build(error-handler-editor|Java(),None(),NoUI(),1)
  generate-java-test                 = build(error-handler-tests |Java(),None(),NoUI(),1)
  compile-java                       = build(error-handler-editor|Java(),None(),NoUI(),2)
  compile-java-test                  = build(error-handler-tests |Java(),None(),NoUI(),2)
  execute-java                       = build(error-handler-editor|Java(),None(),NoUI(),3);debug
  execute-java-test                  = build(error-handler-tests |Java(),None(),NoUI(),3)
  generate-java-incr                 = build(error-handler-editor|Java(),None(),NoUI(),1)
  generate-java-incr-test            = build(error-handler-tests |Java(),None(),NoUI(),1)
  compile-java-incr                  = build(error-handler-editor|Java(),None(),NoUI(),2)
  compile-java-incr-test             = build(error-handler-tests |Java(),None(),NoUI(),2)
  execute-java-incr                  = build(error-handler-editor|Java(),None(),NoUI(),3);debug
  execute-java-incr-test             = build(error-handler-tests |Java(),None(),NoUI(),3)

  generate-webdsl                    = build(error-handler-editor|WebDSL(),None(),NoUI(),1)
  generate-webdsl-test               = build(error-handler-tests |WebDSL(),None(),NoUI(),1)
  generate-webdsl-explorerui         = build(error-handler-editor|WebDSL(),None(),ExplorerUI(),1)
  generate-webdsl-explorerui-test    = build(error-handler-tests |WebDSL(),None(),ExplorerUI(),1)
  generate-webdsl-eager              = build(error-handler-editor|WebDSL(),None(),NoUI(),1)
  generate-webdsl-eager-test         = build(error-handler-tests |WebDSL(),None(),NoUI(),1)
  generate-webdsl-eager-explorerui   = build(error-handler-editor|WebDSL(),None(),ExplorerUI(),1)
  generate-webdsl-eventual           = build(error-handler-editor|WebDSL(),None(),NoUI(),1)
  generate-webdsl-eventual-test      = build(error-handler-tests |WebDSL(),None(),NoUI(),1)
  generate-webdsl-eventual-explorerui= build(error-handler-editor|WebDSL(),None(),ExplorerUI(),1)

rules // Error handlers (editor: report error, do not fail, tests: fail with error)

  error-handler-editor : msg -> ("ERROR_PLACEHOLDER", msg)
    with
      err-msg(|msg)

  error-handler-tests : msg -> None()
    with
      with(fail|msg)

rules // Build in steps

  build(error-handler|lang, implstr, uistyle, phase): (selected, position, ast, path, project-path) -> result
    with
      <store-analysis-resource>$[[project-path]/[path]];
      analysis := <get-stored-analysis>;
      analysis2 := <nabl2-get-custom-analysis>analysis;
      <_index-set>analysis2
    with
      moduleName  := <module-get-modulename>selected;
      result      := <build(error-handler|lang, uistyle, phase, moduleName, path)>

  build(error-handler|lang, uistyle, phase, moduleName, relativePath): _ -> result
    with
      fullPath    := <full-path(|relativePath)>;
      eclipsePath := <eclipse-path>relativePath
    with
//      clear-index2;
//      <index-store-prop2(|ImplStrategy(), moduleName)>implstr;
//      <index-store-prop2(|UIStyle(),      moduleName)>uistyle;
//      error* := <_task-get-messages(|eclipsePath)>
      <index-set(|moduleName, UIStyle     ())>uistyle;
      error* := []
    with
      if not([] := error*) then
        <error-handler>"Fix errors before generating code. Exiting code generation.";
        result := None()
      else
        // phase 1: generate files
        switch !lang
          case ?Java():
            (targetCode, error') := <generate-java-code(error-handler)>moduleName;
            targetFileName := <java-generated-path(|relativePath)>;
            java-library-paths(|fullPath);copy-dir
          case ?WebDSL():
            (targetCode, error') := <generate-webdsl-code(error-handler)>moduleName;
            targetFileName := <webdsl-generated-path(|relativePath)>;
            webdsl-library-paths(|fullPath);copy-dir;
            webdsl-java-library-paths(|fullPath);copy-dir;
            !(<webdsl-saved-but-not-build(|fullPath)>,"");write-file;
            if <modulename-is-explorerui> moduleName then
              jsString := <generate-webdsl-js-code> moduleName;
              <write-file>(<webdsl-js-generated-path(|fullPath)>, jsString)
            end;
            (targetCode2, error2') := <generate-webdsl-java-code(error-handler)>moduleName;
            targetFileName2 := <webdsl-java-generated-path(|fullPath)>;
            <write-file>(<webdsl-java-generated-path(|fullPath)>,targetCode2)              
        end;
        if <eq>(1, phase) then
          result := (targetFileName, targetCode)
        else
          if not([] := error') then
            <error-handler>"Code generation failed.";
            result := None()
          else
            // phase 2: compile generated files
            <write-file> (targetFileName, targetCode);
            (exitCode, stdOut, stdErr) := <call-javac(|<java-generated-path(|fullPath)>)>;
            if not(0 := exitCode) then
              <error-handler>stdOut;
              <error-handler>stdErr;
              <error-handler>"Java compilation failed."
            end;
            if <eq>(2, phase) then
              result := None()
            else
              // phase 3: execute compiled code
              (exitCode', stdOut', stdErr') := <call-java(|<java-compiled-path(|fullPath)>)>;
              if not(0 := exitCode') then
                <error-handler>stdOut';
                <error-handler>stdErr';
                <error-handler>"Java execution failed.";
                result := None()
              else
                result := stdOut'
              end
            end 
          end 
        end 
      end
