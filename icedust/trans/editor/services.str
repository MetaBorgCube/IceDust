module editor/services

imports // constructors

//  signatures/Expressions-sig
//  signatures/Types-sig
//  analysis2/constructors
//  api/_runtime-constructors
//  desugaring/constructors
  
imports // functions

//  api/_generated
//  // analysis/rules
  analysis2/path
//  api/_runtime
//  lib/index
  lib/nabl2
  lib/string
  prettyprinting/pp
//  names/naming/names
//  completion/IceDust-cp
//  runtime/completion/-
  api/types-names-api
  api/model-names-api
  
rules // Editor services

  editor-resolve:
    x@(target, position, ast, path, project-path) -> result
    where
      <is-string>target //dont resolve other things
    where
      result := <nabl2--editor-resolve>x

  editor-hover:
    x@(target, position, ast, path, project-path) -> result
    where
      <not(hover-parent-for)>target
    with
      <store-analysis-resource>$[[project-path]/[path]]
    with
      analysis := <get-stored-analysis>
    with
      analysis2 := <nabl2-get-custom-analysis>analysis;
      <_index-set>analysis2
    with
      result := <get-editor-properties(pp-partial-icedust-string;truncate-string(|200));properties-to-html>target
      
  get-editor-properties(language-pp) = get-all-editor-properties(language-pp);filter(not(?(_,None())<+?(_,[])))
  
  get-all-editor-properties(language-pp):
    t ->
        [
          ("Target",               <language-pp                                       <+ !None()>t),
          ("Target Constructor",   <pp-cons                                           <+ !None()>t),
          ("Type",                 <get-type2        <+ name-get-type                 <+ !None()>t),
          ("Multiplicity",         <get-multiplicity <+ name-get-multiplicity         <+ !None()>t),
          ("Calculation Strategy", <get-strategy     <+ name-get-calculation-strategy <+ !None()>t),
          ("Depends On",           <name-get-dependson-paths                          <+ !None()>t),
          ("Flows To",             <name-get-flowsto-paths-all                        <+ !None()>t),
          ("Topological Sort",     <name-get-toposort                                 <+ !None()>t)
        ]
  
  pp-cons: t -> $[[<get-constructor> t]/[<get-arguments;length> t]] where not(is-string)
  
  pp-property: a -> a
    where is-string
  pp-property: None() -> "-"
  pp-property: a -> <map(pp-property;\x->("",x)\)>a
    where is-list
  pp-property = path-pp
  pp-property = topdown(try(rm-annotations));write-to-string
  
  properties-to-html = map(property-to-html);separate-by(|"<br/>\n");concat-strings
  property-to-html: ("", prop) -> $[[<property-to-html>prop]]
  property-to-html: (name, prop) -> $[<b>[name]</b>: [<property-to-html>prop]]
    where is-tuple
  property-to-html: list -> $[<div>[<properties-to-html>list]</div>]
    where is-list
  property-to-html: prop -> <escape-for-html> $[[<pp-property>prop]]

  escape-for-html =
    string-replace(|"&", "&amp;") ;
    string-replace(|"<", "&lt;") ;
    string-replace(|">", "&gt;") ;
    string-replace(|"\n", "<br/>")

//  // Returns "hover help" information for a particular node in the editor.
//  // For references, this rule is invoked using the resolved term.
//  // http://yellowgrass.org/issue/Spoofax/84
//  editor-hover:
//    x@(target, position, ast, path, project-path) -> $[[warning][hoverinfo]]
//    where
//      <not(hover-parent-for)>target
//    with
//      if Def(_) := target then
//        warning := "<b>Warning showing hover info of Definition instead of Use</b><br/><br/>"
//      else
//        warning := ""
//      end
//    with
//      target' := <editor-service-target>x;
//      hoverinfo := <editor-service-properties(|project-path);filter(_not-none);_properties-to-html>target'
//
//  // Gathers the properties for the properties view.
//  editor-properties:
//    x@(target, position, ast, path, project-path) -> properties
//    where
//      language := <_language>
////      ;
////      _index-setup(|language, project-path);
////      _task-setup(|project-path)
//    with
//      target' := <editor-service-target>x;
//      properties :=  <editor-service-properties(|project-path);bottomup(try(string-replace(|"\n", "")))>target'
//      
//  // Completes an identifier when the user presses control-space
//  // (the completion identifier in the AST provides additional context information)
//  editor-complete:
//    (node, position, ast, path, project-path) -> proposals
//    where
//      proposals := <_analysis-propose-completions(|<_language>, project-path)> ast
//  
//  // Formats the program using a pretty printer    
//  editor-format:
//    (selected, position, ast, path, project-path) -> (path, result)
//    with
////      ext      := <get-extension> path;
////      filename := <guarantee-extension(|$[pp.[ext]])> path;
//      result   := <pp-debug> selected
   
rules // target of editor services

//  editor-service-target: (target, position, ast, path, project-path) -> target'
//    with
//      if Some(a) := target then
//        target' := a
//      else
//        target' := target
//      end

  hover-parent-for: a -> a // for constructors with no children hover parent, except for literals
    where
      [] := <get-arguments>a;
      <not(is-string)>a; //TODO: what about strings of declarations, should they be hovering whole declaration constructor? And for references?
      <not(?False())>a;
      <not(?True())>a;
      <not(?NoValue())>a

rules // properties for editor services
//  
//  editor-service-properties(|project-path): target -> properties'
//    with
//      property1* := <_get-all-editor-properties(pp-partial-IceDust-string;truncate-string(|200) |<_language>, project-path)>target;
//      property2* := <manual-properties>target;
//      properties' := [property1*,property2*]
//
//  manual-properties : t -> props
//    with
//      t' := <try(nabl-get-name)>t;
//      props :=
//        <map(\(a,b)->(a,<pp-property>b)\);filter(_not-none)>
//        [
//          ("Depends on", <index-get-prop(|DependsOn());try(?[];!None()) <+ !None()>t'),
//          ("Flows to  ", <index-get-prop(|FlowsTo())  ;try(?[];!None()) <+ !None()>t'),
//          ("TopoSort  ", <index-get-prop(|TopoSort()) ;try(Hd); try(?[];!None()) <+ !None()>t')
//        ]
//
//  def-warning: Def(_) -> ("Warning!", "Showing hover info of Definition instead of Use")
//
//rules // formatting for editor services
//
//  pp-property : ZeroOrOne() -> "[0, 1], zero or one, maybe/nullable"
//  pp-property : One()       -> "[1, 1], exactly one, required"
//  pp-property : ZeroOrMore()-> "[0, n), zero or more, maybe/nullable"
//  pp-property : OneOrMore()  -> "[1, n), one or more, required"
//
//  pp-property = path-pp  
//  // pp-property : Path(names) -> <concat-strings(|".")>names
//  // pp-property : Inv(path)   -> $[(inv) [<pp-property>path]]
