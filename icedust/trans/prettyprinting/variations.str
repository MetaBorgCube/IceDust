module prettyprinting/variations

imports // constructors

  signatures/_PrettyPrint-sig
  signatures/Data-sig
  signatures/Expressions-sig
  signatures/Model-sig

imports // functions

  libstratego-gpp
  api/data-api
  api/model-api
  lib/lists-tuples
  lib/string
  pp/Expressions-pp
  pp/Model-pp
  pp/Types-pp
  prettyprinting/pp

rules

  apply-pp-variation = bottomup(try(pp-variation))

rules // newline a member value if it is a list or an entity

  pp-variation: MemberValue(a, b) -> MemberValuePP(a, b)
    where
      not([LitVal(_)] := b);
      not([EntityInstanceRef(_)] := b)

rules // single line an entity instance if it has no attributes

  pp-variation: EntityInstance(a, b, c) -> EntityInstancePP(a, b, c)
    where
      [] := c

rules // newline a derivation expression if subexpression is multiline + align colon and equals

  pp-variation: e -> e'
    where
      is-entity
    with
      maxnamelength := <entity-get-members;filter(is-attr);map(attr-get-name);map(strlen);list-max(|0)>e;
      maxtypelenght := <entity-get-members;filter(is-attr);map(ttuple(attr-get-type,attr-get-mult);pp-type-and-multiplicity;strlen);list-max(|0)>e;
      e'            := <topdown(try(pp-variation(|maxnamelength, maxtypelenght)))>e

  pp-variation(|n,t): Attribute          (a, b, c      ) -> AttributePP                   (a, a', b, c          )                                    with a' := <subt;whitespace>(n,<strlen>a)
  pp-variation(|n,t): DerivationAttribute(a, b, c, d, e) -> DerivationAttributePP         (a, a', b, c, c', d, e) where <not(multiline-expression)>d with a' := <subt;whitespace>(n,<strlen>a) with c' := <subt;whitespace>(t,<pp-type-and-multiplicity;strlen>(b,c))
  pp-variation(|n,t): DerivationAttribute(a, b, c, d, e) -> DerivationAttributePPMultiLine(a, a', b, c, c', d, e) where <    multiline-expression >d with a' := <subt;whitespace>(n,<strlen>a) with c' := <subt;whitespace>(t,<pp-type-and-multiplicity;strlen>(b,c))
  pp-variation(|n,t): DefaultAttribute   (a, b, c, d, e) -> DefaultAttributePP            (a, a', b, c, c', d, e) where <not(multiline-expression)>d with a' := <subt;whitespace>(n,<strlen>a) with c' := <subt;whitespace>(t,<pp-type-and-multiplicity;strlen>(b,c))
  pp-variation(|n,t): DefaultAttribute   (a, b, c, d, e) -> DefaultAttributePPMultiLine   (a, a', b, c, c', d, e) where <    multiline-expression >d with a' := <subt;whitespace>(n,<strlen>a) with c' := <subt;whitespace>(t,<pp-type-and-multiplicity;strlen>(b,c))

  pp-type-and-multiplicity: (ty, mu) -> $[[pp-ty][pp-mu]]
    with
      pp-ty := <          prettyprint-icedust-PrimitiveType ;!V([], <id>);box2text-string(|120)>ty;
      pp-mu := <pp-option(prettyprint-icedust-Multiplicity );!V([], <id>);box2text-string(|120)>mu

rules // multiline an expression if one of the subexpressions is multiline or long

  pp-variation: If(a, b, c)    -> IfPP(a, b, c)    where <lome>b <+ <lome>c
  pp-variation: Addition(a, b) -> AdditionPP(a, b) where <lome>a <+ <lome>b

rules
  
  multiline-expression: e -> e
    where
      e-pp := <prettyprint-icedust-Exp;!V([], <id>);box2text-string(|120)>e;
      [_, _ | _ ] := <get-lines>e-pp // minimal two lines

  long-expression: e -> e
    where
      e-pp := <prettyprint-icedust-Exp;!V([], <id>);box2text-string(|120)>e;
      e-pp-len := <strlen>e-pp;
      <gt>(e-pp-len, 80)
      
  long-or-multiline-expression = long-expression <+ multiline-expression
  lome = long-or-multiline-expression
      
