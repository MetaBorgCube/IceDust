module analysis2/analysis2

imports // constructors
  
  signatures/Expressions-sig
//  api/_runtime-constructors
  analysis2/constructors

imports // functions

  analysis2/check
  analysis2/config
  analysis2/path
//  api/_runtime
//  api/execute-api
  api/data-api
  api/data-names-api
//  api/model-api
  api/model-names-api
  api/module-api
  api/module-names-api
//  lib/nabl-ext
  lib/graph
  lib/index
  lib/lists-tuples
//  lib/string
  lib/origin
  lib/traverse
//  names/naming/names
//  naming/_notNaBL
  lib/nabl2

rules

  nabl2-after-analysis(|source,ast): analysis -> ([error2*, error*], [], [], index)
    with
      error2* := <check-config-section>ast
    with
      <store-analysis-resource>analysis
    with
      modulename := <collect-one(is-modulename)>ast
    with
      <depends-on-and-flows-to-2>modulename
    with
      <flows-toposort-2>modulename
    with
      if <not(check-nabl2-attachments)>ast then
        <debug>"missing nabl2 attachments";
        with(fail)
      end;
//      if <check-nabl2-attachments>ast then // workaround http://yellowgrass.org/issue/NaBL2/15. Also means there are no analysis2 error msgs in editor
        <ast-store-membervalues>ast;
        error* := <analysis2check>modulename;
        <module-store-expr>ast;
//      else
//        error* := []
//      end;
      <map(nabl2-custom-analysis-info(|"Error"))>error*
    with
      index := <_index-get>

rules

  check-nabl2-attachments = where(collect-all(is-string,conc);(map(nabl2--get-ast-index) <+ filter(not(nabl2--get-ast-index));debug(!"The following terms do not have an nabl2 attachment ");fail))
  nabl2--get-ast-index = fail //is an internal nabl2 strategy

rules

  ast-store-membervalues: ast -> ast
    with
      memvs     := <collect-all(is-membervalue,conc);filter(where(membervalue-get-name;membervaluename-has-origin))>ast;
      memvs-a   := <filter(where(membervalue-get-name;membervaluename-is-attribute            ))>memvs;
      memvs-rri := <filter(where(membervalue-get-name;membervaluename-is-relation-role-inverse))>memvs;
      memvs-s   := <filter(where(membervalue-get-name;membervaluename-is-shortcut             ))>memvs
    with
      ast*    := <map(ttuple(membervalue-get-name, membervalue-get-expr))>memvs-a
    with
      <nabl2-custom-analysis-info-msg(|"asts         ")>ast*
    with
      <map(index-set-prop(|AST()))>ast*
    with
      assoc1* := <fmap(membervalue-rri-assocs)>memvs-rri;
      assoc2* := <fmap(membervalue-s-assocs  )>memvs-s;
      assoc*  := [assoc1*, assoc2*]
    with
      <nabl2-custom-analysis-info-msg(|"assocs       ")>assoc*
    with
      <map(index-add-prop(|Assoc()))>assoc*
      
  membervalue-rri-assocs: memv -> [assoc1*, assoc2*]
    with
      name        := <membervalue-get-name>memv;
      name2origin := <membervalue-get-name;membervaluename-get-origin;name-get-inversename>memv;
      ei          := <membervalue-get-name;membervaluename-get-entityinstancename>memv;
      expr        := <membervalue-get-expr>memv;
      ei2*        := <map(entityinstance-get-name;get-decl(|"Member")) <+ ![]>expr //if LitVal, empty list
    with
      assoc1* := <map   (\ei2->(name,                                                      ei2)\)>ei2*;
      assoc2* := <filter(\ei2->(<entityinstancename-get-membervaluename(|name2origin)>ei2, ei )\)>ei2*  //filter out wrong types
      
  membervalue-s-assocs: memv -> assoc*
    with
      assoc* := <membervalue-get-expr;fmap(membervalue-s-expr-assocs(|memv))>memv

  membervalue-s-expr-assocs(|memv): expr -> [assoc1*, assoc2, assoc3, assoc4*]
    with
      name         := <membervalue-get-name>memv;
      eiName       := <membervalue-get-name;membervaluename-get-entityinstancename>memv;
      eiName2      := <entityinstance-get-name;get-decl(|"Member")>expr;
      roleName1    := <membervaluename-get-origin;shortcutname-get-rolename1>name;
      roleName2    := <membervaluename-get-origin;shortcutname-get-rolename2>name;
      inverseName1 := <rolename-get-inversename>roleName1;
      inverseName2 := <rolename-get-inversename>roleName2;
      if riName    := <relation-instance-get-name>expr then
        id
      else
        relationName  := <attributename-get-entityname>roleName1;
        modulename    := <entityinstancename-get-modulename>eiName;
        riName-string := <custom-origin(|name)>$[[eiName][<ucfirst>eiName2][<ucfirst>relationName]];
        riName        := <entityinstancename-get-modulename;modulename-decl-entityinstancename(|riName-string, relationName)>eiName
      end;
      memv-r1-name := <entityinstancename-get-membervaluename(|roleName1)>riName;
      memv-r2-name := <entityinstancename-get-membervaluename(|roleName2)>riName;
      memv-i1-name*:= <filter(entityinstancename-get-membervaluename(|inverseName1))>[eiName]; // membervaluename can fail if ei1 has wrong type
      memv-i2-name*:= <filter(entityinstancename-get-membervaluename(|inverseName2))>[eiName2] // membervaluename can fail if ei2 has wrong type
    with
      if memv-i1-name := <Hd>memv-i1-name* then
        assoc1* := [(memv-i1-name, riName)]
      else
        assoc1* := []
      end;
      assoc2 := (memv-r1-name, eiName);
      assoc3 := (memv-r2-name, eiName2);
      if memv-i2-name := <Hd>memv-i2-name* then
        assoc4* := [(memv-i2-name, riName)]
      else
        assoc4* := []
      end

  module-store-expr: ast -> ast
    with
      name  := <module-get-modulename>ast;
      exprs := <module-get-exprs>ast;
      <index-set(|name, AST())>exprs

rules

  depends-on-and-flows-to-2: modulename -> modulename
    with
      arrinames    := <modulename-get-arrinames-default-derived-has-expr-notinline>modulename
    with
      dependencies := <fmap(arriname-dependencies)>arrinames;
      dataflow     := <map(path-inverse)>dependencies
    with
      <nabl2-custom-analysis-info-msg(|"dependencies ")>dependencies;
      <nabl2-custom-analysis-info-msg(|"dataflow     ")>dataflow
    with
      <map(path-store-on-origin)>dependencies;
      <map(path-store-on-origin)>dataflow

  arriname-dependencies: attrName -> dependencies
    with
      expr              := <name-get-expr>attrName;
      (p*, q*)          := <expr-pathexprs>expr;
      pathexprs         := [p*, q*];
      pathexprs-no-this := <filter(not(?This()));map(pathexpr-remove-this;pathexpr-remove-shortcuts)>pathexprs;
      all-pathexprs     := <fmap(pathexpr-shorten-refl-trans);make-set-no-annos>pathexprs-no-this;
      dependencies      := <map(path(|attrName))>all-pathexprs
      
rules

  flows-toposort-2: moduleName -> moduleName
    with
      graphNames      := <modulename-get-arrleftnames-not-inline>moduleName;
      graphNames'     := <map(annotate-with-parent-entity)>graphNames;
      toposort        := <graph-topological-sort(toposort-edge)>graphNames';
      toposort'       := <map(map(de-annotate-with-parent-entity))>toposort;
      <index-set(|moduleName, TopoSort())>toposort';
      numbers     := <add-indices;map(zip-repeat-1);concat;map(tuple-reverse)>toposort';
      <map(index-set-prop(|TopoSort()))>numbers
      
    annotate-with-parent-entity    = id
    de-annotate-with-parent-entity = id
      
//  annotate-with-parent-entity    = try(nabl2--preserve-ast-index(?name;attributename-get-entityname;?ent;!name{("parent-entity",ent)}))
//  de-annotate-with-parent-entity = try(nabl2--preserve-ast-index(?name{("parent-entity",_)};!name{}))

  toposort-edge: name -> all-names*
    with
      name' := <de-annotate-with-parent-entity>name;
      names* := <index-get2(|FlowsTo());map(path-last)>name';
      if inv-name := <name-get-inversename>name' then
        inv-names* := <index-get2(|FlowsTo());map(path-last)>inv-name
      else
        inv-names* := []
      end;
      parent-names* := <name-get-parent2>name;
      all-names* := <map(annotate-with-parent-entity)>[names*, inv-names*, parent-names*]
      
