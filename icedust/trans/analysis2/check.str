module analysis2/check

imports // constructors
  
  signatures/Expressions-sig
  api/_runtime-constructors
  analysis2/constructors

imports // functions

  analysis2/path
  api/_runtime
  api/data-api
//  api/execute-api
  api/data-api
  api/data-names-api
  api/model-api
  api/model-names-api
//  api/module-api
  api/module-names-api
  api/types-api
  api/types-names-api
//  lib/nabl-ext
  lib/graph
  lib/index
  lib/lists-tuples
  lib/traverse
  lib/debug
//  names/naming/names
//  naming/_notNaBL
  
rules

  analysis2check = concat(data-check-multiplicities, data-check-not-derived, data-check-required, model-check-upper)

rules

  data-check-multiplicities: moduleName -> result
    with
      eiNames*   := <modulename-get-entityinstancenames>moduleName;
      result     := <fmap(einame-check-multiplicities)>eiNames*
  
  einame-check-multiplicities: eiName -> []
    where
      not(entityinstancename-get-entityname) // erroneous programs might have entity instances without type

  einame-check-multiplicities: eiName -> result
    with
      entityName       := <entityinstancename-get-entityname>eiName;
      relRoleInvNames  := <entityname-get-relroleinvnames>entityName;
      memberValueNames := <filter(entityinstancename-get-membervaluename-inv(|eiName))>relRoleInvNames; //broken because of http://yellowgrass.org/issue/StrategoXT/913 trigger creation of all memvs, but dont use the list
      memberValueNames':= <entityinstancename-get-relation-role-inverse>eiName;
      result           := <fmap(memv-check-multiplicities(|eiName))>memberValueNames'
      
  memv-check-multiplicities(|eiName): memvName -> result
    with
      values       := <membervaluename-get-values>memvName;
      num          := <length>values;
      memberName   := <membervaluename-get-origin>memvName;
      multiplicity := <name-get-multiplicity>memberName;
      if <not(name-is-derived)>memberName then
        if <mult-inbounds(|multiplicity)>num then
          result := []
        else
          msg := $[Multiplicity mismatch: expected [<write-to-string>multiplicity] got [<write-to-string>num] on [eiName].[memberName]];
          result := (eiName, msg)
        end
      else
        if <eq(|0)>num then
          result := []
        else
          msg := $[Member [memberName] is a derived value];
          result := (memvName, msg)
        end
      end
      
rules

  data-check-not-derived: moduleName -> result
    with
      eiNames*   := <modulename-get-entityinstancenames>moduleName;
      result     := <fmap(einame-check-not-derived)>eiNames*

  einame-check-not-derived: eiName -> []
    where
      not(entityinstancename-get-entityname) // erroneous programs might have entity instances without type

  einame-check-not-derived: eiName -> result
    with
      attrNames := <entityinstancename-get-attributevaluenames>eiName;
      result    := <filter(memv-check-not-derived)>attrNames

  memv-check-not-derived: memvName -> result
    with
      memberName   := <membervaluename-get-origin>memvName
    where
      <attributename-is-derivation>memberName
    with
      msg := $[Attribute [memberName] is a derived value];
      result := (memvName, msg)
      
rules

  data-check-required: moduleName -> result
    with
      eiNames*   := <modulename-get-entityinstancenames>moduleName;
      result     := <fmap(einame-check-required)>eiNames*

  einame-check-required: eiName -> []
    where
      not(entityinstancename-get-entityname) // erroneous programs might have entity instances without type
      
  einame-check-required: eiName -> [result]
    with
      attrValueNames := <entityinstancename-get-attributevaluenames>eiName;
      entityName     := <entityinstancename-get-entityname>eiName;
      reqAttrNames   := <entityname-get-attributenames;filter(attributename-is-normal;name-is-one)>entityName;
      ommittedAtrs   := <diff-no-annos>(reqAttrNames, attrValueNames)
    where
      l := <length>ommittedAtrs;
      <not(eq)>(l,0)
    with
      msg := $[[eiName] misses required attributes: [<concat-strings(|", ")>ommittedAtrs]];
      result := (eiName, msg)
      
  einame-check-required: eiName -> [] // if where fails

rules
  
  model-check-upper: moduleName -> result
    with
      eNames*   := <modulename-get-entitynames>moduleName;
      result     := <filter(ename-check-upper)>eNames*

  ename-check-upper: eName -> (eName, "Entity type names must start with a capital.")
    where
      <not(first-is-upper)>eName
