module analysis/expressions-collections

rules

  [[ Filter(e1, x, e2) ^ (s) : TTuple(e1_type, out_mult, out_strat) ]] :=
    new s2,
    s2 -P-> s,
    Member{x} <- s2,
    Member{x} : TTuple(e1_type, TOne(), e1_strat),
    Member{x}.ns := Variable(),
    Member{x}.reltype := None(),
    Member{x}.side := None(),
    [[ e1 ^ (s)  : TTuple(e1_type, e1_mult, e1_strat) ]],
    [[ e2 ^ (s2) : TTuple(e2_type, e2_mult, e2_strat) ]],
    e2_type == TBoolean() | error $[Type mismatch: expected Boolean got [e2_type]]@e2,
    e2_mult == TOne()     | error $[Multiplicity mismatch: expected One got [e2_type]]@e2,
    out_mult is lowerboundZero of e1_mult,
    out_strat is strat.lub of (e1_strat, e2_strat).

  [[ OrderBy(e1, x, e2) ^ (s) : TTuple(e1_type, out_mult, out_strat) ]] :=
    new s2,
    s2 -P-> s,
    Member{x} <- s2,
    Member{x} : TTuple(e1_type, TOne(), e1_strat),
    Member{x}.ns := Variable(),
    Member{x}.reltype := None(),
    Member{x}.side := None(),
    [[ e1 ^ (s)  : TTuple(e1_type, e1_mult, e1_strat) ]],
    [[ e2 ^ (s2) : TTuple(e2_type, e2_mult, e2_strat) ]],
    e2_type <test? CanCompare() | error $[Type mismatch: expected comparable type got [e2_type]]@e2,
    e2_mult == TOne()           | error $[Multiplicity mismatch: expected One got [e2_type]]@e2,
    out_mult is toOrdered of e1_mult,
    out_strat is strat.lub of (e1_strat, e2_strat).

  [[ Find(e1, x, e2) ^ (s) : TTuple(e1_type, TZeroOrOne(), out_strat) ]] :=
    new s2,
    s2 -P-> s,
    Member{x} <- s2,
    Member{x} : TTuple(e1_type, TOne(), e1_strat),
    Member{x}.ns := Variable(),
    Member{x}.reltype := None(),
    Member{x}.side := None(),
    [[ e1 ^ (s)  : TTuple(e1_type, e1_mult, e1_strat) ]],
    [[ e2 ^ (s2) : TTuple(e2_type, e2_mult, e2_strat) ]],
    e2_type == TBoolean() | error $[Type mismatch: expected Boolean got [e2_type]]@e2,
    e2_mult == TOne()     | error $[Multiplicity mismatch: expected One got [e2_type]]@e2,
    out_strat is strat.lub of (e1_strat, e2_strat).
