module expressions-aggregation

rules
  
  [[ Function("min", [e1]) ^ (s) : TTuple(e1_type, out_mult, e1_strat) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsNumeric(),
    out_mult is upperboundOne of e1_mult,
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.
    
  [[ Function("max", [e1]) ^ (s) : TTuple(e1_type, out_mult, e1_strat) ]] := // identical to Min
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsNumeric(),
    out_mult is upperboundOne of e1_mult,
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.
    
  [[ Function("avg", [e1]) ^ (s) : TTuple(e1_type, out_mult, e1_strat) ]] := // identical to Min
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsNumeric(),
    out_mult is upperboundOne of e1_mult,
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.
    
  [[ Function("sum", [e1]) ^ (s) : TTuple(e1_type, TOne(), e1_strat) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsNumeric(),
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.
    
  [[ Function("conj", [e1]) ^ (s) : TTuple(e1_type, TOne(), e1_strat) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsBoolean(),
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.

  [[ Function("disj", [e1]) ^ (s) : TTuple(e1_type, TOne(), e1_strat) ]] := // identical to Conj
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsBoolean(),
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.

  [[ Function("concat", [e1]) ^ (s) : TTuple(e1_type, TOne(), e1_strat) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsString(),
    e1_mult_u is multUpper of e1_mult,
    e1_mult_u == TUMany() | error $[Expected multiplicity of higher than One] @ e1.

  [[ Function("count", [e1]) ^ (s) : TTuple(TInt(), TOne(), e1_strat) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    e1_type <test? IsType(). // make sure it evaluates to something
 