module types-references-roles-inverses

language icedust

fixture [[
  module test
  model
  entity Node{}
//  relation Node.maybe ? <-> 1 Node.one {}
//  relation Node.star * <-> + Node.plus {}
  relation NodeMaybeRelation {
    Node.maybeRelation ? -> one
    Node.oneRelation 1 -> maybe
    maybe.one <-> one.maybe
  }

  relation NodeStarRelation {
    Node.starRelation * -> plus
    Node.plusRelation + (ordered) -> star
    star.plus <-> plus.star
  }
  data
  n : Node {
    maybe = <e : NodeMaybeRelation { } > n
    star  = <e2 : NodeStarRelation { } > n
  }
  execute
  3
  [[...]]
]]

test type of shortcut                    [[n.maybe]]           run get-type2 to "Node"
test type of shortcut shortcut           [[n.maybe.one]]       run get-type2 to "Node"
test type of shortcut shortcut shortcut  [[n.maybe.one.star]]  run get-type2 to "Node"

test multiplicity of role ZeroOrOne    [[e.maybe]]  run get-multiplicity to One()
test multiplicity of role One          [[e.one]]    run get-multiplicity to One()
test multiplicity of role ZeroOrMore   [[e2.star]]  run get-multiplicity to One()
test multiplicity of role OneOrMore    [[e2.plus]]  run get-multiplicity to One()

test multiplicity of inverse role ZeroOrOne   [[n.maybeRelation.maybe]] run get-multiplicity to ZeroOrOne()
test multiplicity of inverse role One         [[n.oneRelation.one]]     run get-multiplicity to One()
test multiplicity of inverse role ZeroOrMore  [[n.starRelation.star]]   run get-multiplicity to ZeroOrMore()
test multiplicity of inverse role OneOrMore   [[n.plusRelation.plus]]   run get-multiplicity to OneOrMoreOrdered()

test multiplicity of shortcut ZeroOrOne  [[n.maybe]] run get-multiplicity to ZeroOrOne()
test multiplicity of shortcut One        [[n.one]]   run get-multiplicity to One()
test multiplicity of shortcut ZeroOrMore [[n.star]]  run get-multiplicity to ZeroOrMore()
test multiplicity of shortcut OneOrMore  [[n.plus]]  run get-multiplicity to OneOrMoreOrdered()

test multiplicity of shortcut shortcut ZeroOrOne   [[n.maybe.maybe]] run get-multiplicity to ZeroOrOne()
test multiplicity of shortcut shortcut ZeroOrOne 2 [[n.maybe.one]]   run get-multiplicity to ZeroOrOne()

test ordering of shortcut Unordered    [[n.star]] run get-multiplicity to ZeroOrMore() // is unordered
test ordering of shortcut Ordered      [[n.plus]] run get-multiplicity to OneOrMoreOrdered() // is ordered

test ordering of inverse Ordered      [[n.plusRelation]] run get-multiplicity to OneOrMoreOrdered() // is ordered
test ordering of inverse Unordered    [[n.starRelation]] run get-multiplicity to ZeroOrMore() // is unordered
