module types-references-relations

language icedust

fixture [[
  module test
  model
    entity Node{}
    relation Node.maybe ? <-> 1 Node.one
    relation Node.star * <-> + (ordered) Node.plus
  data
    n : Node {
      maybe = n2 { }
      star  = n2
      one   = n2
      plus  = n2
    }
  execute
  3
  [[...]]
]]

test type of relation                    [[n.maybe]]           run get-type2 to "Node"
test type of relation relation           [[n.maybe.one]]       run get-type2 to "Node"
test type of relation relation relation  [[n.maybe.one.star]]  run get-type2 to "Node"

test multiplicity of relation ZeroOrOne  [[n.maybe]] run get-multiplicity to ZeroOrOne()
test multiplicity of relation One        [[n.one]]   run get-multiplicity to One()
test multiplicity of relation ZeroOrMore [[n.star]]  run get-multiplicity to ZeroOrMore()
test multiplicity of relation OneOrMore  [[n.plus]]  run get-multiplicity to OneOrMoreOrdered()

test multiplicity of relation relation ZeroOrOne   [[n.maybe.maybe]] run get-multiplicity to ZeroOrOne()
test multiplicity of relation relation ZeroOrOne 2 [[n.maybe.one]]   run get-multiplicity to ZeroOrOne()

test ordering of relation Unordered    [[n.star]] run get-multiplicity to ZeroOrMore() // is unordered
test ordering of relation Ordered      [[n.plus]] run get-multiplicity to OneOrMoreOrdered() // is ordered
