module names-traits-filtertype

language icedust

test resolve filter type expression member access [[
module test
model

  entity Assignment {
    grade : Float?
    a     : Float? = this.filter(:CollectionAssignment).[[grade]]
  }
  
  entity LeafAssignment extends Assignment {
  
  }
  
  entity CollectionAssignment extends Assignment {
    [[grade]] : Float? = avg(children.grade)
  }
  
  relation CollectionAssignment.children * <-> ? Assignment.parent
]] resolve #1 to #2

test resolve filter type [[
module test
model

  entity Assignment {
    grade : Float?
    a     : Float? = this.filter(:[[CollectionAssignment]]).grade
  }
  
  entity LeafAssignment extends Assignment {
  
  }
  
  entity [[CollectionAssignment]] extends Assignment {
    grade : Float? = avg(children.grade)
  }
  
  relation CollectionAssignment.children * <-> ? Assignment.parent
]] resolve #1 to #2

test resolve filter type 2 [[
module test
model

  entity Assignment {
  }
  
  entity LeafAssignment extends Assignment {
  }
  
  entity [[CollectionAssignment]] extends Assignment {
  }
  
  relation CollectionAssignment.children * <-> ? Assignment.parent
  
  relation Assignment.root 1 = parent.root.filter(:[[CollectionAssignment]]) <+ this <-> Assignment
  
]] resolve #2 to #1
